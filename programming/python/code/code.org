#+Title: code
#+OPTIONS: ^:nil num:nil author:nil email:nil creator:nil timestamp:nil

#+HTML_HEAD: <style type="text/css" >
#+HTML_HEAD_EXTRA: pre.example {background-color: #ffffff;}
#+HTML_HEAD_EXTRA: pre.src-python {background-color: #ffffff;}
#+HTML_HEAD_EXTRA: </style>

* Chapter 2 - Flow Control

** vampire.py

#+BEGIN_SRC python :tangle vampire.py :padline no
  if name == 'Alice':
      print('Hi, Alice.')
  elif age < 12:
      print('You are not Alice, kiddo.')
  elif age > 2000:
      print('Unlike you, Alice is not an undead, immortal vampire.')
  elif age > 100:
      print('You are not Alice, grannie.')
#+END_SRC

** vampire2.py

#+BEGIN_SRC python :tangle vampire2.py :padline no
  if name == 'Alice':
      print('Hi, Alice.')
  elif age < 12:
      print('You are not Alice, kiddo.')
  elif age > 100:
      print('You are not Alice, grannie.')
  elif age > 2000:
      print('Unlike you, Alice is not an undead, immortal vampire.')
#+END_SRC

** littleKid.py

#+BEGIN_SRC python :tangle littleKid.py :padline no
  if name == 'Alice':
      print('Hi, Alice.')
  elif age < 12:
      print('You are not Alice, kiddo.')
  else:
      print('You are neither Alice nor a little kid.')
#+END_SRC

** swordfish.py

#+BEGIN_SRC python :tangle swordfish.py :padline no
  # swordfish.py WORKS. case sensitive.

  while True:
      print('Who are you?')
      name = input()
      if name != 'Joe':
          continue
      print('Hello, Joe. What is the password? (It is a fish.)')
      password = input()
      if password == 'swordfish':
          break
  print('Access granted.')
#+END_SRC

** fiveTimes.py

#+BEGIN_SRC python :tangle fiveTimes.py :padline no
  # fiveTimes.py FOR LOOP. WORKS
  print('My name is')
  for i in range(5):
      print('Jimmy Five Times (' + str(i) + ')')
#+END_SRC

** printRandom.py

#+BEGIN_SRC python :tangle printRandom.py :padline no
  # printRandom.py. random. WORKS

  import random
  for i in range(5):
      print(random.randint(1, 10))

#+END_SRC

** exitExample.py

#+BEGIN_SRC python :tangle exitExample.py :padline no
  # exitExample.py. EXIT. WORKS

  import sys

  while True:
      print('Type exit to exit.')
      response = input()
      if response == 'exit':
          sys.exit()
      print('You typed ' + response + '.')
#+END_SRC

* Chapter 3 - Functions

** helloFunc.py

#+BEGIN_SRC python :tangle helloFunc.py :padline no
# helloFunc.py. functions. WORKS

def hello():
    print('Howdy!')
    print('Howdy!!!')
    print('Hello there.')

hello()
hello()
hello()
#+END_SRC

** helloFunc2.py

#+BEGIN_SRC python :tangle helloFunc2.py :padline no
# helloFunc2.py. function arguments. WORKS

def hello(name):
    print('Hello ' + name)

hello('Alice')
hello('Bob')
#+END_SRC

** magic8Ball.py

#+BEGIN_SRC python :tangle magic8Ball.py :padline no
  # magic8Ball.py. WORKS

  import random

  def getAnswer(answerNumber):
      if answerNumber == 1:
          return 'It is certain'
      elif answerNumber == 2:
          return 'It is decidedly so'
      elif answerNumber == 3:
          return 'Yes'
      elif answerNumber == 4:
          return 'Reply hazy try again'
      elif answerNumber == 5:
          return 'Ask again later'
      elif answerNumber == 6:
          return 'Concentrate and ask again'
      elif answerNumber == 7:
          return 'My reply is no'
      elif answerNumber == 8:
          return 'Outlook not so good'
      elif answerNumber == 9:
          return 'Very doubtful'

  r = random.randint(1, 9)
  fortune = getAnswer(r)
  print(fortune)
#+END_SRC

** zeroDivide.py

#+BEGIN_SRC python :tangle zeroDivide.py :padline no
  # zeroDivide.py
  # example of bad code
  # Exception Handling

  # def spam(divideBy):
    #  return 42 / divideBy

  def spam(divideBy):
      try:
          return 42 / divideBy
      except ZeroDivisionError:
          print('Error: Invalid argument.')

  print(spam(2))
  print(spam(12))
  print(spam(0))
  print(spam(1))
#+END_SRC

** guessTheNumber.py

#+BEGIN_SRC python :tangle guessTheNumber.py :padline no
  # guessTheNumber.py
  # A Short Program: Guess the Number
  # WORKS

  # This is a guess the number game.

  import random
  secretNumber = random.randint(1, 20)
  print('I am thinking of a number between 1 and 20.')

  # Ask the player to guess 6 times.
  for guessesTaken in range(1, 7):
      print('Take a guess.')
      guess = int(input())

      if guess < secretNumber:
          print('Your guess is too low.')
      elif guess > secretNumber:
          print('Your guess is too high.')
      else:
          break # This condition is the correct guess!

  if guess == secretNumber:
      print('Good job! You guessed my number in ' + str(guessesTaken) + ' guesses!')
  else:
      print('Nope. The number I was thinking of was ' + str(secretNumber))
#+END_SRC

** sameName2.py

#+BEGIN_SRC python :tangle sameName2.py :padline no
  # sameName2.py
  # The global Statement

  def spam():
      global eggs
      eggs = 'spam'
    
  eggs = 'global'
  spam()
  print(eggs)
#+END_SRC

** sameName3.py

#+BEGIN_SRC python :tangle sameName3.py :padline no
  # sameName3.py

  def spam():
      global eggs
      eggs = 'spam' # this is the global

  def bacon():
      eggs = 'bacon' # this is a localw
  def ham():
      print(eggs) # this is the global

  eggs = 42 # this is the global
  spam()
  print(eggs)
#+END_SRC

** sameName4.py

#+BEGIN_SRC python :tangle sameName4.py :padline no
  # sameName4.py
  # example of bad code

  def spam():
      print(eggs) # ERROR!
      eggs = 'spam local'

  eggs = 'global'
  spam()
#+END_SRC

** sameName.py

#+BEGIN_SRC python :tangle sameName.py :padline no
  # sameName.py
  # Local and Global Variables with the Same Name
  # WORKS

  def spam():
      eggs = 'spam local'
      print(eggs)     # prints 'spam local'
  def bacon():
      eggs = 'bacon local'
      print(eggs) # prints 'bacon local'
      spam()
      print(eggs) # prints 'bacon local'
  eggs = 'global'
  bacon()
  print(eggs) # prints 'global'
#+END_SRC

* Chapter 4 - Lists

** allMyCats1.py

#+BEGIN_SRC python :tangle allMyCats1.py :padline no
  # allMyCats1.py
  # Working with Lists
  # WORKS

  print('Enter the name of cat 1:')
  catName1 = input()
  print('Enter the name of cat 2:')
  catName2 = input()
  print('Enter the name of cat 3:')
  catName3 = input()
  print('Enter the name of cat 4:')
  catName4 = input()
  print('Enter the name of cat 5:')
  catName5 = input()
  print('Enter the name of cat 6:')
  catName6 = input()
  print('The cat names are:')
  print(catName1 + ' ' + catName2 + ' ' + catName3 + ' ' + catName4 + ' ' +
  catName5 + ' ' + catName6)
#+END_SRC

** allMyCats2.py

#+BEGIN_SRC python :tangle allMyCats2.py :padline no
  # allMyCats2.py
  # Working with Lists
  # WORKS

  catNames = []
  while True:
      print('Enter the name of cat ' + str(len(catNames) + 1) +
      ' (Or enter nothing to stop.):')
      name = input()
      if name == '':
          break
      catNames = catNames + [name] # list concatenation
  print('The cat names are:')
  for name in catNames:
      print(' ' + name)
#+END_SRC

** myPets.py

#+BEGIN_SRC python :tangle myPets.py :padline no
  # myPets.py
  # The in and not in Operators
  # WORKS

  myPets = ['Zophie', 'Pooka', 'Fat-tail']
  print('Enter a pet name:')
  name = input()
  if name not in myPets:
      print('I do not have a pet named ' + name)
  else:
      print(name + ' is my pet.')
#+END_SRC

** magic8Ball2.py

#+BEGIN_SRC python :tangle magic8Ball2.py :padline no
  # magic8Ball2.py
  # Example Program: Magic 8 Ball with a List
  # WORKS

  import random

  messages = ['It is certain',
      'It is decidedly so',
      'Yes definitely',
      'Reply hazy try again',
      'Ask again later',
      'Concentrate and ask again',
      'My reply is no',
      'Outlook not so good',
      'Very doubtful']

  print(messages[random.randint(0, len(messages) - 1)])
#+END_SRC

** passingReference.py

#+BEGIN_SRC python :tangle passingReference.py :padline no
  # passingReference.py
  # Passing References
  # WORKS

  def eggs(someParameter):
      someParameter.append('Hello')
      
  spam = [1, 2, 3]
  eggs(spam)
  print(spam)
#+END_SRC

* Chapter 5 - Dictionaries and Structuring Data

** birthdays.py

#+BEGIN_SRC python :tangle birthdays.py :padline no
  # birthdays.py
  # Dictionaries vs. Lists
  # WORKS

  birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}

  while True:
      print('Enter a name: (blank to quit)')
      name = input()
      if name == '':
          break
      
      if name in birthdays:
          print(birthdays[name] + ' is the birthday of ' + name)
      else:
          print('I do not have birthday information for ' + name)
          print('What is their birthday?')
          bday = input()
          birthdays[name] = bday
          print('Birthday database updated.')
#+END_SRC

** characterCount.py

#+BEGIN_SRC python :tangle characterCount.py :padline no
  # characterCount.py
  # The setdefault() Method
  # WORKS

  message = 'It was a bright cold day in April, and the clocks were striking thirteen.'
  count = {}

  for character in message:
      count.setdefault(character, 0)
      count[character] = count[character] + 1
  print(count)
#+END_SRC

** prettyCharacterCount.py

#+BEGIN_SRC python :tangle prettyCharacterCount.py :padline no
  # prettyCharacterCount.py
  # Pretty Printing
  # WORKS

  import pprint
  message = 'It was a bright cold day in April, and the clocks were striking thirteen.'
  count = {}

  for character in message:
      count.setdefault(character, 0)
      count[character] = count[character] + 1

  pprint.pprint(count)
#+END_SRC

** ticTacToe.py

#+BEGIN_SRC python :tangle ticTacToe.py :padline no
  # ticTacToe.py
  # A Tic-Tac-Toe Board
  # WORKS but not functional
  # http://nostarch.com/automatestuff/ for full version

  theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',
  'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',
  'low-L': ' ', 'low-M': ' ', 'low-R': ' '}

  def printBoard(board):
      print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
      print('-+-+-')
      print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
      print('-+-+-')
      print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])
  turn = 'X'
  for i in range(9):
      printBoard(theBoard)
      print('Turn for ' + turn + '. Move on which space?')
      move = input()
      theBoard[move] = turn
      if turn == 'X':
          turn = 'O'
      else:
          turn = 'X'
      
  printBoard(theBoard)
#+END_SRC

** inventory.py

#+BEGIN_SRC python :tangle inventory.py :padline no
  # inventory.py
  # Practice Projects
  # WORKS. incomplete

  stuff = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}
  def displayInventory(inventory):
      print("Inventory:")
      item_total = 0
      for k, v in inventory.items():
          print(str(v) + ' ' + k)
          item_total += v
      print("Total number of items: " + str(item_total))
  displayInventory(stuff)

  #def addToInventory(inventory, addedItems):
      # your code goes here

  #inv = {'gold coin': 42, 'rope': 1}
  #dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']
  #inv = addToInventory(inv, dragonLoot)
  #displayInventory(inv)
#+END_SRC

* Chapter 6 - Manipulating Strings

** catnapping.py

#+BEGIN_SRC python :tangle catnapping.py :padline no
  # catnapping.py
  # Multiline Strings with Triple Quotes
  # WORKS

  print('''Dear Alice,

  Eve's cat has been arrested for catnapping, cat burglary, and extortion.

  Sincerely,
  Bob''')
#+END_SRC

** validateInput.py

#+BEGIN_SRC python :tangle validateInput.py :padline no
  # validateInput.py
  # The isX String Methods
  # WORKS

  while True:
      print('Enter your age:')
      age = input()
      if age.isdecimal():
          break
      print('Please enter a number for your age.')

  while True:
      print('Select a new password (letters and numbers only):')
      password = input()
      if password.isalnum():
          break
      print('Passwords can only have letters and numbers.')
#+END_SRC

** picnicTable.py

#+BEGIN_SRC python :tangle picnicTable.py :padline no
  # picnicTable.py
  # Justifying Text with rjust(), ljust(), and center()
  # WORKS

  def printPicnic(itemsDict, leftWidth, rightWidth):
      print('PICNIC ITEMS'.center(leftWidth + rightWidth, '-'))
      for k, v in itemsDict.items():
          print(k.ljust(leftWidth, '.') + str(v).rjust(rightWidth))

  picnicItems = {'sandwiches': 4, 'apples': 12, 'cups': 4, 'cookies': 8000}
  printPicnic(picnicItems, 12, 5)
  printPicnic(picnicItems, 20, 6)
#+END_SRC

** pw.py

#+BEGIN_SRC python :tangle pw.py :padline no
  #! python3
  # pw.py - An insecure password locker program.
  # Project: Password Locker
  # install pyperclip module
  # Pyperclip could not find a copy/paste mechanism for your system.
  # yum install xclip
  # WORKS

  PASSWORDS = {'email': 'F7minlBDDuvMJuxESSKHFhTxFtjVB6',
               'blog': 'VmALvQyKAxiVH5G8v01if1MLZF3sdt',
               'luggage': '12345'}

  import sys, pyperclip
  if len(sys.argv) < 2:
      print('Usage: py pw.py [account] - copy account password')
      sys.exit()

  account = sys.argv[1]   # first command line arg is the account name

  if account in PASSWORDS:
      pyperclip.copy(PASSWORDS[account])
      print('Password for ' + account + ' copied to clipboard.')
  else:
      print('There is no account named ' + account)
#+END_SRC

** bulletPointAdder.py

#+BEGIN_SRC python :tangle bulletPointAdder.py :padline no
  #! python3
  # bulletPointAdder.py - Adds Wikipedia bullet points to the start
  # of each line of text on the clipboard.
  # Project: Adding Bullets to Wiki Markup
  # WORKS

  import pyperclip
  text = pyperclip.paste()

  # Separate lines and add stars.
  lines = text.split('\n')
  for i in range(len(lines)):    # loop through all indexes for "lines" list
      lines[i] = '* ' + lines[i] # add star to each string in "lines" list
  text = '\n'.join(lines)
  pyperclip.copy(text)
#+END_SRC

* Chapter 7 - Pattern Matching with Regular Expressions

** isPhoneNumber.py

#+BEGIN_SRC python :tangle isPhoneNumber.py :padline no
  # isPhoneNumber.py
  # works

  def isPhoneNumber(text):
      if len(text) != 12:
          return False
      for i in range(0, 3):
          if not text[i].isdecimal():
              return False
      if text[3] != '-':
          return False
      for i in range(4, 7):
          if not text[i].isdecimal():
              return False
      if text[7] != '-':
          return False
      for i in range(8, 12):
          if not text[i].isdecimal():
              return False
      return True


  print('415-555-4242 is a phone number:')
  print(isPhoneNumber('415-555-4242'))
  print('Moshi moshi is a phone number:')
  print(isPhoneNumber('Moshi moshi'))
#+END_SRC

** phoneAndEmail.py

#+BEGIN_SRC python :tangle phoneAndEmail.py :padline no
  #! python3
  # phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.
  # works
  # usage: python3.4 ./phoneAndEmail.py
  # copy https://www.nostarch.com/contactus.htm to the clipboard

  import pyperclip, re

  phoneRegex = re.compile(r'''(
      (\d{3}|\(\d{3}\))?                 # area code        
      (\s|-|\.)?                         # separator        
      (\d{3})                            # first 3 digits   
      (\s|-|\.)                          # separator        
      (\d{4})                            # last 4 digits    
      (\s*(ext|x|ext.)\s*(\d{2,5}))?     # extension      
      )''', re.VERBOSE)

  # Create email regex.
  emailRegex = re.compile(r'''(
      [a-zA-Z0-9._%+-]+    # username
      @                    # @ symbol
      [a-zA-Z0-9.-]+       # domain name
      (\.[a-zA-Z]{2,4})    # dot-something
      )''', re.VERBOSE)

  # Find matches in clipboard text.
  text = str(pyperclip.paste())
  matches = []
  for groups in phoneRegex.findall(text):
      phoneNum = '-'.join([groups[1], groups[3], groups[5]])
      if groups[8] != '':
          phoneNum += ' x' + groups[8]
      matches.append(phoneNum)
  for groups in emailRegex.findall(text):
      matches.append(groups[0])

  # Copy results to the clipboard.
  if len(matches) > 0:
      pyperclip.copy('\n'.join(matches))
      print('Copied to clipboard:')
      print('\n'.join(matches))
  else:
      print('No phone numbers or email addresses found.')
#+END_SRC

* Chapter 8 - Reading and Writing Files

** randomQuizGenerator.py

#+BEGIN_SRC python :tangle randomQuizGenerator.py :padline no
  #! python3
  # randomQuizGenerator.py - Creates quizzes with questions and answers in
  # random order, along with the answer key.
  # works

  import random

  # The quiz data. Keys are states and values are their capitals.
  capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau',
              'Arizona': 'Phoenix','Arkansas': 'Little Rock',
              'California': 'Sacramento', 'Colorado': 'Denver',
              'Connecticut': 'Hartford', 'Delaware': 'Dover',
              'Florida': 'Tallahassee','Georgia': 'Atlanta',
              'Hawaii': 'Honolulu', 'Idaho': 'Boise',
              'Illinois':'Springfield', 'Indiana': 'Indianapolis',
              'Iowa': 'Des Moines', 'Kansas':'Topeka',
              'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge',
              'Maine':'Augusta', 'Maryland': 'Annapolis',
              'Massachusetts': 'Boston', 'Michigan':'Lansing',
              'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson',
              'Missouri':'Jefferson City', 'Montana': 'Helena',
              'Nebraska': 'Lincoln', 'Nevada':'Carson City',
              'New Hampshire': 'Concord', 'New Jersey': 'Trenton',
              'New Mexico': 'Santa Fe', 'New York': 'Albany',
              'North Carolina': 'Raleigh','North Dakota': 'Bismarck',
              'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',
              'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg',
              'Rhode Island': 'Providence','South Carolina': 'Columbia',
              'South Dakota': 'Pierre', 'Tennessee':'Nashville',
              'Texas': 'Austin', 'Utah': 'Salt Lake City',
              'Vermont':'Montpelier', 'Virginia': 'Richmond',
              'Washington': 'Olympia', 'WestVirginia': 'Charleston',
              'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}

  # Generate 35 quiz files.

  for quizNum in range(35):
      # Create the quiz and answer key files.
      quizFile = open('capitalsquiz%s.txt' % (quizNum + 1), 'w')
      answerKeyFile = open('capitalsquiz_answers%s.txt' % (quizNum + 1), 'w')

      # Write out the header for the quiz.
      quizFile.write('Name:\n\nDate:\n\nPeriod:\n\n')
      quizFile.write((' ' * 20) + 'State Capitals Quiz (Form %s)' % (quizNum + 1))
      quizFile.write('\n\n')

      # Shuffle the order of the states.
      states = list(capitals.keys())
      random.shuffle(states)

      # Loop through all 50 states, making a question for each.
      for questionNum in range(50):

          # Get right and wrong answers.
          correctAnswer = capitals[states[questionNum]]
          wrongAnswers = list(capitals.values())
          del wrongAnswers[wrongAnswers.index(correctAnswer)]
          wrongAnswers = random.sample(wrongAnswers, 3)
          answerOptions = wrongAnswers + [correctAnswer]
          random.shuffle(answerOptions)

          # Write the question and the answer options to the quiz file.
          quizFile.write('%s. What is the capital of %s?\n' % (questionNum + 1,
              states[questionNum]))
          for i in range(4):
              quizFile.write('%s. %s\n' % ('ABCD'[i], answerOptions[i]))
          quizFile.write('\n')

          # Write the answer key to a file.
          answerKeyFile.write('%s. %s\n' % (questionNum + 1, 'ABCD'[
              answerOptions.index(correctAnswer)]))
  quizFile.close()
  answerKeyFile.close()
#+END_SRC

** mcb.pyw

#+BEGIN_SRC python :tangle mcb.pyw :padline no
  #! python3
  # mcb.pyw - Saves and loads pieces of text to the clipboard.
  # Usage: py.exe mcb.pyw save <keyword> - Saves clipboard to keyword.
  #        py.exe mcb.pyw <keyword> - Loads keyword to clipboard.
  #        py.exe mcb.pyw list - Loads all keywords to clipboard.

  # works but check what is going on

  import shelve, pyperclip, sys

  mcbShelf = shelve.open('mcb')

  # Save clipboard content.
  if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':
      mcbShelf[sys.argv[2]] = pyperclip.paste()
  elif len(sys.argv) == 2:
      # List keywords and load content.
      if sys.argv[1].lower() == 'list':
          pyperclip.copy(str(list(mcbShelf.keys())))
      elif sys.argv[1] in mcbShelf:
          pyperclip.copy(mcbShelf[sys.argv[1]])
#+END_SRC

* Chapter 10 - Debugging

** boxPrint.py

#+BEGIN_SRC python :tangle boxPrint.py :padline no
  def boxPrint(symbol, width, height):
      if len(symbol) != 1:
          raise Exception('Symbol must be a single character string.')
      if width <= 2:
          raise Exception('Width must be greater than 2.')
      if height <= 2:
          raise Exception('Height must be greater than 2.')
      print(symbol * width)
      for i in range(height - 2):
          print(symbol + (' ' * (width - 2)) + symbol)
      print(symbol * width)

  for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):
      try:
          boxPrint(sym, w, h)
      except Exception as err:
          print('An exception happened: ' + str(err))
#+END_SRC

** buggyAddingProgram.py

#+BEGIN_SRC python :tangle buggyAddingProgram.py :padline no
  print('Enter the first number to add:')
  first = input()
  print('Enter the second number to add:')
  second = input()
  print('Enter the third number to add:')
  third = input()
  print('The sum is ' + first + second + third)
#+END_SRC

** coinFlip.py

#+BEGIN_SRC python :tangle coinFlip.py :padline no
  import random
  heads = 0
  for i in range(1, 1001):
      if random.randint(0, 1) == 1:
          heads = heads + 1
      if i == 500:
          print('Halfway done!')
  print('Heads came up ' + str(heads) + ' times.')
#+END_SRC

** errorExample.py

#+BEGIN_SRC python :tangle errorExample.py :padline no
  def spam():
      bacon()
      
  def bacon():
      raise Exception('This is the error message.')

  spam()
#+END_SRC

** factorialLog.py

#+BEGIN_SRC python :tangle factorialLog.py :padline no
  import logging
  logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
  logging.debug('Start of program')

  def factorial(n):
      logging.debug('Start of factorial(%s%%)' % (n))
      total = 1
      # for i in range(n + 1):
      for i in range(1, n + 1):    
          total *= i
          logging.debug('i is ' + str(i) + ', total is ' + str(total))
      logging.debug('End of factorial(%s%%)' % (n))
      return total

  print(factorial(5))
  logging.debug('End of program')
#+END_SRC

* chapter 12 - Working with Excel Spreadsheets

** Opening Excel Documents with OpenPyXL

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> type(wb)
  <class 'openpyxl.workbook.workbook.Workbook'>
#+END_SRC

** Getting Sheets from the Workbook

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> type(wb)
  <class 'openpyxl.workbook.workbook.Workbook'>
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> wb.get_sheet_names()
  ['Sheet1', 'Sheet2', 'Sheet3']
  >>> sheet = wb.get_sheet_by_name('Sheet3')
  >>> sheet
  <Worksheet "Sheet3">
  >>> type(sheet)
  <class 'openpyxl.worksheet.worksheet.Worksheet'>
  >>> sheet.title
  'Sheet3'
  >>> anotherSheet = wb.get_active_sheet()
  >>> anotherSheet
  <Worksheet "Sheet1">
#+END_SRC

** Getting Cells from the Sheets

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_sheet_by_name('Sheet1')
  >>> sheet['A1']
  <Cell 'Sheet1'.A1>
  >>> sheet['A1'].value
  datetime.datetime(2015, 4, 5, 13, 34, 2)
  >>> c = sheet['B1']
  >>> c.value
  'Apples'
  >>> 'Row ' + str(c.row) + ', Column ' + c.column + ' is ' + c.value
  'Row 1, Column B is Apples'
  >>> 'Cell ' + c.coordinate + ' is ' + c.value
  'Cell B1 is Apples'
  >>> sheet['C1'].value
  73
  >>> 
#+END_SRC

#+BEGIN_SRC python
  >>> sheet.cell(row=1, column=2)
  <Cell 'Sheet1'.B1>
  >>> sheet.cell(row=1, column=2).value
  'Apples'
  >>> for i in range(1, 8, 2):
  ...     print(i, sheet.cell(row=i, column=2).value)
  ... 
  1 Apples
  3 Pears
  5 Apples
  7 Strawberries
#+END_SRC

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_sheet_by_name('Sheet1')
  >>> sheet.max_row
  7
  >>> sheet.max_column
  3
  >>> 
#+END_SRC

** Converting Between Column Letters and Numbers

#+BEGIN_SRC python
  >>> import openpyxl
  >>> from openpyxl.utils import get_column_letter, column_index_from_string
  >>> get_column_letter(1)
  'A'
  >>> get_column_letter(2)
  'B'
  >>> get_column_letter(27)
  'AA'
  >>> get_column_letter(900)
  'AHP'
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_sheet_by_name('Sheet1')
  >>> get_column_letter(sheet.max_column)
  'C'
  >>> column_index_from_string('A')
  1
  >>> column_index_from_string('AA')
  27
#+END_SRC

** Getting Rows and Columns from the Sheets

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_sheet_by_name('Sheet1')
  >>> tuple(sheet['A1':'C3'])
  ((<Cell 'Sheet1'.A1>, <Cell 'Sheet1'.B1>, <Cell 'Sheet1'.C1>), (<Cell 'Sheet1'.A2>, 
  <Cell 'Sheet1'.B2>, <Cell 'Sheet1'.C2>), (<Cell 'Sheet1'.A3>, <Cell 'Sheet1'.B3>, 
  <Cell 'Sheet1'.C3>))
  >>> for rowOfCellObjects in sheet['A1':'C3']:
  ...     for cellObj in rowOfCellObjects:
  ...         print(cellObj.coordinate, cellObj.value)
  ...     print('--- END OF ROW ---')
  ... 
  A1 2015-04-05 13:34:02
  B1 Apples
  C1 73
  --- END OF ROW ---
  A2 2015-04-05 03:41:23
  B2 Cherries
  C2 85
  --- END OF ROW ---
  A3 2015-04-06 12:46:51
  B3 Pears
  C3 14
  --- END OF ROW ---
#+END_SRC

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_active_sheet()
  >>> list(sheet.columns)[1]
  (<Cell 'Sheet1'.B1>, <Cell 'Sheet1'.B2>, <Cell 'Sheet1'.B3>, <Cell 'Sheet1'.B4>, 
  <Cell 'Sheet1'.B5>, <Cell 'Sheet1'.B6>, <Cell 'Sheet1'.B7>)
  >>> for cellObj in list(sheet.columns)[1]:
  ...     print(cellObj.value)
  ... 
  Apples
  Cherries
  Pears
  Oranges
  Apples
  Bananas
  Strawberries
#+END_SRC

** Project: Reading Data from a Spreadsheet

=censuspopdata.xlsx=

*** readCensusExcel.py

#+BEGIN_SRC python :tangle readCensusExcel.py :padline no
  #! python3
  # readCensusExcel.py - Tabulates population and number of census tracts for
  # each county.

  import openpyxl, pprint
  print('Opening workbook...')
  wb = openpyxl.load_workbook('censuspopdata.xlsx')
  sheet = wb.get_sheet_by_name('Population by Census Tract')
  countyData = {}

  # Fill in countyData with each county's population and tracts.
  print('Reading rows...')
  for row in range(2, sheet.max_row + 1):
      # Each row in the spreadsheet has data for one census tract.
      state = sheet['B' + str(row)].value
      county = sheet['C' + str(row)].value
      pop = sheet['D' + str(row)].value

      # Make sure the key for this state exists.
      countyData.setdefault(state, {})
      # Make sure the key for this county in this state exists.
      countyData[state].setdefault(county, {'tracts': 0, 'pop': 0})

      # Each row represents one census tract, so increment by one.
      countyData[state][county]['tracts'] += 1
      # Increase the county pop by the pop in this census tract.
      countyData[state][county]['pop'] += int(pop)

  # Open a new text file and write the contents of countyData to it.
  print('Writing results...')
  resultFile = open('census2010.py', 'w')
  resultFile.write('allData = ' + pprint.pformat(countyData))
  resultFile.close()
  print('Done.')
#+END_SRC

#+BEGIN_SRC python
  >>> import census2010
  >>> census2010.allData['AK']['Anchorage']
  {'pop': 291826, 'tracts': 55}
  >>> anchoragePop = census2010.allData['AK']['Anchorage']['pop']
  >>> print('The 2010 population of Anchorage was ' + str(anchoragePop))
  The 2010 population of Anchorage was 291826
#+END_SRC

** Creating and Saving Excel Documents

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.Workbook()
  >>> wb.get_sheet_names()
  ['Sheet']
  >>> sheet = wb.get_active_sheet()
  >>> sheet.title
  'Sheet'
  >>> sheet.title = 'Spam Bacon Eggs Sheet'
  >>> wb.get_sheet_names()
  ['Spam Bacon Eggs Sheet']
#+END_SRC

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('example.xlsx')
  >>> sheet = wb.get_active_sheet()
  >>> sheet.title = 'Spam Spam Spam'
  >>> wb.save('example_copy.xlsx')
#+END_SRC

** Creating and Removing Sheets

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.Workbook()
  >>> wb.get_sheet_names()
  ['Sheet']
  >>> wb.create_sheet()
  <Worksheet "Sheet1">
  >>> wb.get_sheet_names()
  ['Sheet', 'Sheet1']
  >>> wb.create_sheet(index=0, title='First Sheet')
  <Worksheet "First Sheet">
  >>> wb.get_sheet_names()
  ['First Sheet', 'Sheet', 'Sheet1']
  >>> wb.create_sheet(index=2, title='Middle Sheet')
  <Worksheet "Middle Sheet">
  >>> wb.get_sheet_names()
  ['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']
  >>> wb.remove_sheet(wb.get_sheet_by_name('Middle Sheet'))
  >>> wb.remove_sheet(wb.get_sheet_by_name('Sheet1'))
  >>> wb.get_sheet_names()
  ['First Sheet', 'Sheet']
#+END_SRC

** Writing Values to Cells

#+BEGIN_SRC python
  >>> import openpyxl
  >>> wb = openpyxl.Workbook()
  >>> sheet = wb.get_sheet_by_name('Sheet')
  >>> sheet['A1'] = 'Hello world!'
  >>> sheet['A1'].value
  'Hello world!'
#+END_SRC

** Project: Updating a Spreadsheet

=produceSales.xlsx=

*** updateProduce.py

#+BEGIN_SRC python :tangle updateProduce.py :padline no
  #! python3
  # updateProduce.py - Corrects costs in produce sales spreadsheet.
  # works

  import openpyxl

  wb = openpyxl.load_workbook('produceSales.xlsx')
  sheet = wb.get_sheet_by_name('Sheet')

  # The produce types and their updated prices
  PRICE_UPDATES = {'Garlic': 3.07,
                   'Celery': 1.19,
                   'Lemon': 1.27}

  # Loop through the rows and update the prices.
  for rowNum in range(2, sheet.max_row): # skip the first row
      produceName = sheet.cell(row=rowNum, column=1).value
      if produceName in PRICE_UPDATES:
          sheet.cell(row=rowNum, column=2).value = PRICE_UPDATES[produceName]

  wb.save('updatedProduceSales.xlsx')
#+END_SRC

** Adjusting Rows and Columns

*** Setting Row Height and Column Width

#+BEGIN_SRC python works
  >>> import openpyxl
  >>> wb = openpyxl.Workbook()
  >>> sheet = wb.get_active_sheet()
  >>> sheet['A1'] = 'Tall row'
  >>> sheet['B2'] = 'Wide column'
  >>> sheet.row_dimensions[1].height = 70
  >>> sheet.column_dimensions['B'].width = 20
  >>> wb.save('dimensions.xlsx')
#+END_SRC

*** Merging and Unmerging Cells

#+BEGIN_SRC python works
  >>> import openpyxl
  >>> wb = openpyxl.Workbook()
  >>> sheet = wb.get_active_sheet()
  >>> sheet.merge_cells('A1:D3')
  >>> sheet['A1'] = 'Twelve cells merged together.'
  >>> sheet.merge_cells('C5:D5')
  >>> sheet['C5'] = 'Two merged cells.'
  >>> wb.save('merged.xlsx')
#+END_SRC

#+BEGIN_SRC python works
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('merged.xlsx')
  >>> sheet = wb.get_active_sheet()
  >>> sheet.unmerge_cells('A1:D3')
  >>> sheet.unmerge_cells('C5:D5')
  >>> wb.save('merged.xlsx')
#+END_SRC

** Freeze Panes

*** Table 12-3: Frozen Pane Examples

#+BEGIN_EXAMPLE
  | freeze_panes setting                                   | Rows and columns frozen   |
  |--------------------------------------------------------+---------------------------|
  | sheet.freeze_panes = 'A2'                              | Row 1                     |
  | sheet.freeze_panes = 'B1'                              | Column A                  |
  | sheet.freeze_panes = 'C1'                              | Columns A and B           |
  | sheet.freeze_panes = 'C2'                              | Row 1 and columns A and B |
  | sheet.freeze_panes = 'A1' or sheet.freeze_panes = None | No frozen panes           |
#+END_EXAMPLE

#+BEGIN_SRC python works
  >>> import openpyxl
  >>> wb = openpyxl.load_workbook('produceSales.xlsx')
  >>> sheet = wb.get_active_sheet()
  >>> sheet.freeze_panes = 'A2'
  >>> wb.save('freezeExample.xlsx')
#+END_SRC
