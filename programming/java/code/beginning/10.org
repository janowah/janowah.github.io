#+title: ch10 - Writing Files
#+options: num:nil ^:nil creator:nil author:nil timestamp:nil

* =GatheringWrite.java=

#+BEGIN_SRC java -n :tangle GatheringWrite.java :padline no
  import static java.lang.Math.ceil;
  import static java.lang.Math.sqrt;

  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  public class GatheringWrite {
    public static void main(String[] args) {
      int primesRequired = 100; // Default count
      if (args.length > 0) {
        try {
          primesRequired = Integer.valueOf(args[0]).intValue();
        } catch (NumberFormatException e) {
          System.out.println("Prime count value invalid. Using default of " + primesRequired);
        }
      }

      long[] primes = new long[primesRequired]; // Array to store primes
      primes[0] = 2; // Seed the first prime
      primes[1] = 3; // and the second
      // Count of primes found - up to now, which is also the array index
      int count = 2;
      long number = 5; // Next integer to be tested

      outer:
      for (; count < primesRequired; number += 2) {

        // The maximum divisor we need to try is square root of number
        long limit = (long) ceil(sqrt((double) number));

        // Divide by all the primes we have up to limit
        for (int i = 1; i < count && primes[i] <= limit; i++) {
          if (number % primes[i] == 0) { // Is it an exact divisor?
            continue outer; // yes, try the next number
          }
        }
        primes[count++] = number; // We got one!
      }

      File aFile = new File("/tmp/primes2.txt"); // Different file!
      FileOutputStream outputFile = null;
      try {
        outputFile = new FileOutputStream(aFile);
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      FileChannel file = outputFile.getChannel();

      ByteBuffer[] buffers = new ByteBuffer[3]; // Array of buffer references
      buffers[0] = ByteBuffer.allocate(8); // To hold a double value
      buffers[2] = ByteBuffer.allocate(8); // To hold a long value

      String primeStr = null;
      for (long prime : primes) {
        primeStr = "prime = " + prime;
        buffers[0].putDouble((double) primeStr.length()).flip();
        buffers[1] = ByteBuffer.allocate(primeStr.length());
        buffers[1].put(primeStr.getBytes()).flip();
        buffers[2].putLong(prime).flip();
        try {
          file.write(buffers);
        } catch (IOException e) {
          e.printStackTrace(System.err);
          System.exit(1);
        }
        buffers[0].clear();
        buffers[2].clear();
      }

      try {
        System.out.println("File written is " + file.size() + " bytes.");
        outputFile.close(); // Close the file and its channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }

      System.out.println("File closed");
      System.exit(0);
    }
  }
#+END_SRC

* =PrimesToFile2.java=

#+BEGIN_SRC java -n :tangle PrimesToFile2.java :padline no
  import static java.lang.Math.ceil;
  import static java.lang.Math.sqrt;

  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.CharBuffer;
  import java.nio.DoubleBuffer;
  import java.nio.LongBuffer;
  import java.nio.channels.FileChannel;

  public class PrimesToFile2 {
    public static void main(String[] args) {
      int primesRequired = 100; // Default count
      if (args.length > 0) {
        try {
          primesRequired = Integer.valueOf(args[0]).intValue();
        } catch (NumberFormatException e) {
          System.out.println("Prime count value invalid. Using default of " + primesRequired);
        }
      }

      long[] primes = new long[primesRequired]; // Array to store primes
      primes[0] = 2; // Seed the first prime
      primes[1] = 3; // and the second
      int count = 2; // Count of primes found - up to now, which is also the array index
      long number = 5; // Next integer to be tested

      outer:
      for (; count < primesRequired; number += 2) {

        // The maximum divisor we need to try is square root of number
        long limit = (long) ceil(sqrt((double) number));

        // Divide by all the primes we have up to limit
        for (int i = 1; i < count && primes[i] <= limit; i++)
          if (number % primes[i] == 0) // Is it an exact divisor?
          continue outer; // yes, try the next number

        primes[count++] = number; // We got one!
      }

      File aFile = new File("/tmp/primes1.txt");
      FileOutputStream outputFile = null;
      try {
        outputFile = new FileOutputStream(aFile);
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      FileChannel file = outputFile.getChannel();
      final int BUFFERSIZE = 100; // Buffer size in bytes
      ByteBuffer buf = ByteBuffer.allocate(BUFFERSIZE);

      DoubleBuffer doubleBuf = buf.asDoubleBuffer();
      buf.position(8);
      CharBuffer charBuf = buf.asCharBuffer();
      LongBuffer longBuf = null;
      String primeStr = null;

      for (long prime : primes) {
        primeStr = "prime = " + prime; // Create the string
        doubleBuf.put(0, (double) primeStr.length()); // Store the string length
        charBuf.put(primeStr); // Store the string
        buf.position(2 * charBuf.position() + 8); // Position for 3rd buffer
        longBuf = buf.asLongBuffer(); // Create the buffer
        longBuf.put(prime); // Store the binary long value
        buf.position(buf.position() + 8); // Set position after last value
        buf.flip(); // and flip
        try {
          file.write(buf); // Write the buffer as before.
        } catch (IOException e) {
          e.printStackTrace(System.err);
          System.exit(1);
        }
        buf.clear();
        doubleBuf.clear();
        charBuf.clear();
      }
      try {
        System.out.println("File written is " + file.size() + " bytes.");
        outputFile.close(); // Close the file and its channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      System.exit(0);
    }
  }
#+END_SRC

* =PrimesToFile3.java=

#+BEGIN_SRC java -n :tangle PrimesToFile3.java :padline no
  import static java.lang.Math.ceil;
  import static java.lang.Math.sqrt;

  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  public class PrimesToFile3 {
    public static void main(String[] args) {

      int primesRequired = 100; // Default count
      if (args.length > 0) {
        try {
          primesRequired = Integer.valueOf(args[0]).intValue();
        } catch (NumberFormatException e) {
          System.out.println("Prime count value invalid. Using default of " + primesRequired);
        }
      }

      long[] primes = new long[primesRequired]; // Array to store primes
      primes[0] = 2; // Seed the first prime
      primes[1] = 3; // and the second
      // Count of primes found - up to now, which is also the array index
      int count = 2;
      long number = 5; // Next integer to be tested

      outer:
      for (; count < primesRequired; number += 2) {

        // The maximum divisor we need to try is square root of number
        long limit = (long) ceil(sqrt((double) number));

        // Divide by all the primes we have up to limit
        for (int i = 1; i < count && primes[i] <= limit; i++)
          if (number % primes[i] == 0) // Is it an exact divisor?
          continue outer; // yes, try the next number

        primes[count++] = number; // We got one!
      }

      File aFile = new File("C:/Beg Java Stuff/primes.txt");
      FileOutputStream outputFile = null;
      try {
        outputFile = new FileOutputStream(aFile);
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      FileChannel file = outputFile.getChannel();

      final int BUFFERSIZE = 1024; // Buffer size in bytes - bigger!
      ByteBuffer buf = ByteBuffer.allocate(BUFFERSIZE);
      String primeStr = null;
      int primesWritten = 0;
      while (primesWritten < primes.length) {
        while (primesWritten < primes.length) {
          primeStr = "prime = " + primes[primesWritten];
          if ((buf.position() + 2 * primeStr.length() + 16) > buf.limit()) {
            break;
          }
          buf.asDoubleBuffer().put(0, (double) primeStr.length());
          buf.position(buf.position() + 8);
          buf.position(buf.position() + 2 * buf.asCharBuffer().put(primeStr).position());
          buf.asLongBuffer().put(primes[primesWritten++]);
          buf.position(buf.position() + 8);
        }
        buf.flip();
        try {
          file.write(buf);
        } catch (IOException e) {
          e.printStackTrace(System.err);
          System.exit(1);
        }
        buf.clear();
      }
      try {
        System.out.println("File written is " + file.size() + " bytes.");
        outputFile.close(); // Close the file and its channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      System.exit(0);
    }
  }
#+END_SRC

* =PrimesToFile.java=

#+BEGIN_SRC java -n :tangle PrimesToFile.java :padline no
  import static java.lang.Math.ceil;
  import static java.lang.Math.min;
  import static java.lang.Math.sqrt;

  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.LongBuffer;
  import java.nio.channels.FileChannel;

  public class PrimesToFile {
    public static void main(String[] args) {
      int primesRequired = 100; // Default count
      if (args.length > 0) {
        try {
          primesRequired = Integer.valueOf(args[0]).intValue();
        } catch (NumberFormatException e) {
          System.out.println("Prime count value invalid. Using default of " + primesRequired);
        }
      }

      long[] primes = new long[primesRequired]; // Array to store primes
      primes[0] = 2; // Seed the first prime
      primes[1] = 3; // and the second
      // Count of primes found - up to now, which is also the array index
      int count = 2;
      // Next integer to be tested
      long number = 5;

      outer:
      for (; count < primesRequired; number += 2) {

        // The maximum divisor we need to try is square root of number
        long limit = (long) ceil(sqrt((double) number));

        // Divide by all the primes we have up to limit
        for (int i = 1; i < count && primes[i] <= limit; i++)
          if (number % primes[i] == 0) // Is it an exact divisor?
          continue outer; // yes, try the next number

        primes[count++] = number; // We got one!
      }

      File aFile = new File("C:/Beg Java Stuff/primes.bin");
      FileOutputStream outputFile = null;
      try {
        outputFile = new FileOutputStream(aFile); // Create the file stream
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      FileChannel file = outputFile.getChannel(); // Get the channel from the stream
      final int BUFFERSIZE = 100; // Byte buffer size
      ByteBuffer buf = ByteBuffer.allocate(BUFFERSIZE);
      LongBuffer longBuf = buf.asLongBuffer(); // View buffer for type long

      // Count of primes written to file
      int primesWritten = 0;

      while (primesWritten < primes.length) {
        longBuf.put(
            primes, // Array to be written
            primesWritten, // Index of 1st element to write
            min(longBuf.capacity(), primes.length - primesWritten));
        buf.limit(8 * longBuf.position()); // Update byte buffer position
        try {
          file.write(buf);
          primesWritten += longBuf.position();
        } catch (IOException e) {
          e.printStackTrace(System.err);
          System.exit(1);
        }
        longBuf.clear();
        buf.clear();
      }

      try {
        System.out.println("File written is " + file.size() + " bytes.");
        outputFile.close(); // Close the file and its channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      System.exit(0);
    }
  }
#+END_SRC

* =UsingAFormatter.java=

#+BEGIN_SRC java -n :tangle UsingAFormatter.java :padline no
  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.CharBuffer;
  import java.nio.channels.FileChannel;
  import java.util.Formatter;

  public class UsingAFormatter {
    public static void main(String[] args) {
      String[] phrases = {
        "Rome wasn't burned in a day.",
        "It's a bold mouse that sits in the cat's ear.",
        "An ounce of practice is worth a pound of instruction."
      };
      String dirname = "/tmp"; // Directory name
      String filename = "Phrases.txt"; // File name

      File dir = new File(dirname); // File object for directory

      // Now check out the directory
      if (!dir.exists()) { // If directory does not exist
        if (!dir.mkdir()) { // ...create it
          System.out.println("Cannot create directory: " + dirname);
          System.exit(1);
        }
      } else if (!dir.isDirectory()) {
        System.err.println(dirname + " is not a directory");
        System.exit(1);
      }

      // Create the filestream
      File aFile = new File(dir, filename); // File object for the file path
      FileOutputStream outputFile = null; // Place to store the stream reference
      try {
        outputFile = new FileOutputStream(aFile, true);
        System.out.println("File stream created successfully.");
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
      }

      // Create the file output stream channel
      FileChannel outChannel = outputFile.getChannel();

      // Create byte buffer to hold data to be written
      ByteBuffer buf = ByteBuffer.allocate(1024);
      System.out.println("\nByte buffer:");
      System.out.printf(
          "position = %2d  Limit = %4d  capacity = %4d%n",
          buf.position(), buf.limit(), buf.capacity());

      // Create a view buffer
      CharBuffer charBuf = buf.asCharBuffer();
      System.out.println("Char view buffer:");
      System.out.printf(
          "position = %2d  Limit = %4d  capacity = %4d%n",
          charBuf.position(), charBuf.limit(), charBuf.capacity());
      Formatter formatter = new Formatter(charBuf);

      // Write to the view buffer using a formatter
      int number = 0; // Proverb number
      for (String phrase : phrases) {
        formatter.format("%nProverb%3d: %s", ++number, phrase);
        System.out.println("\nView buffer after loading:");
        System.out.printf(
            "position = %2d  Limit = %4d  capacity = %4d%n",
            charBuf.position(), charBuf.limit(), charBuf.capacity());
        charBuf.flip(); // Flip the view buffer
        System.out.println("View buffer after flip:");
        System.out.printf(
            "position = %2d  Limit = %4d  length = %4d%n",
            charBuf.position(), charBuf.limit(), charBuf.length());
        buf.limit(2 * charBuf.length()); // Set byte buffer limit

        System.out.println("Byte buffer after limit update:");
        System.out.printf(
            "position = %2d  Limit = %4d  length = %4d%n",
            buf.position(), buf.limit(), buf.remaining());

        // Write the file
        try {
          outChannel.write(buf); // Write the buffer to the file channel
          System.out.println("Buffer contents written to file.");
          buf.clear();
          charBuf.clear();
        } catch (IOException e) {
          e.printStackTrace(System.err);
          System.exit(1);
        }
      }
      try {
        outputFile.close(); // Close the O/P stream & the channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
      }
    }
  }
#+END_SRC

* =WriteAStringAsBytes.java=

#+BEGIN_SRC java -n :tangle WriteAStringAsBytes.java :padline no
  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  public class WriteAStringAsBytes {
    public static void main(String[] args) {

      String phrase = new String("Garbage in, garbage out\n");
      String dirname = "C:/Beg Java Stuff"; // Directory name
      String filename = "byteData.txt";

      File aFile = new File(dirname, filename);

      // Create the file output stream
      FileOutputStream file = null;
      try {
        file = new FileOutputStream(aFile, true);
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
      }
      FileChannel outChannel = file.getChannel();
      ByteBuffer buf = ByteBuffer.allocate(phrase.length());
      byte[] bytes = phrase.getBytes();
      buf.put(bytes);
      buf.flip();

      try {
        outChannel.write(buf);
        file.close(); // Close the output stream & the channel
      } catch (IOException e) {
        e.printStackTrace(System.err);
      }
    }
  }
#+END_SRC

* =WriteAString.java=

#+BEGIN_SRC java -n :tangle WriteAString.java :padline no
  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  public class WriteAString {
    public static void main(String[] args) {
      String phrase = new String("Garbage in, garbage out\n");
      String dirname = "C:/Beg Java Stuff"; // Directory name
      String filename = "charData.txt"; // File name

      File dir = new File(dirname); // File object for directory

      // Now check out the directory
      if (!dir.exists()) { // If directory does not exist
        if (!dir.mkdir()) { // ...create it
          System.out.println("Cannot create directory: " + dirname);
          System.exit(1);
        }
      } else if (!dir.isDirectory()) {
        System.err.println(dirname + " is not a directory");
        System.exit(1);
      }

      // Create the filestream
      File aFile = new File(dir, filename); // File object for the file path
      FileOutputStream outputFile = null; // Place to store the stream reference
      try {
        outputFile = new FileOutputStream(aFile, true);
        System.out.println("File stream created successfully.");
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
      }

      // Create the file output stream channel
      FileChannel outChannel = outputFile.getChannel();

      ByteBuffer buf = ByteBuffer.allocate(1024);
      System.out.println(
          "New buffer:           position = "
              + buf.position()
              + "\tLimit = "
              + buf.limit()
              + "\tcapacity = "
              + buf.capacity());

      // Load the data into the buffer
      for (char ch : phrase.toCharArray()) {
        buf.putChar(ch);
      }

      System.out.println(
          "Buffer after loading: position = "
              + buf.position()
              + "\tLimit = "
              + buf.limit()
              + "\tcapacity = "
              + buf.capacity());
      buf.flip(); // Flip the buffer ready for file write
      System.out.println(
          "Buffer after flip:    position = "
              + buf.position()
              + "\tLimit = "
              + buf.limit()
              + "\tcapacity = "
              + buf.capacity());

      // Write the file
      try {
        outChannel.write(buf); // Write the buffer to the file channel
        outputFile.close(); // Close the O/P stream & the channel
        System.out.println("Buffer contents written to file.");
      } catch (IOException e) {
        e.printStackTrace(System.err);
      }
      System.exit(0);
    }
  }
#+END_SRC

* =WriteProverbs.java=

#+BEGIN_SRC java -n :tangle WriteProverbs.java :padline no
  import java.io.File;
  import java.io.FileNotFoundException;
  import java.io.FileOutputStream;
  import java.io.IOException;
  import java.nio.ByteBuffer;
  import java.nio.channels.FileChannel;

  public class WriteProverbs {
    public static void main(String[] args) {
      String dirName = "/tmp"; // Directory for the output file
      String fileName = "Proverbs.txt"; // Name of the output file
      String[] sayings = {
        "Indecision maximizes flexibility.",
        "Only the mediocre are always at their best.",
        "A little knowledge is a dangerous thing.",
        "Many a mickle makes a muckle.",
        "Who begins too much achieves little.",
        "Who knows most says least.",
        "A wise man sits on the hole in his carpet."
      };
      File aFile = new File(dirName, fileName);

      FileOutputStream outputFile = null;
      try {
        outputFile = new FileOutputStream(aFile, true);
      } catch (FileNotFoundException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      FileChannel outChannel = outputFile.getChannel();

      // Create a buffer to accommodate the longest string + its length value
      int maxLength = 0;
      for (String saying : sayings) {
        if (maxLength < saying.length()) maxLength = saying.length();
      }

      ByteBuffer buf = ByteBuffer.allocate(2 * maxLength + 4);

      // Write the file
      try {
        for (String saying : sayings) {
          buf.putInt(saying.length()).asCharBuffer().put(saying);
          buf.position(buf.position() + 2 * saying.length()).flip();
          outChannel.write(buf); // Write the buffer to the file channel
          buf.clear();
        }
        outputFile.close(); // Close the output stream & the channel
        System.out.println("Proverbs written to file.");
      } catch (IOException e) {
        e.printStackTrace(System.err);
        System.exit(1);
      }
      System.exit(0);
    }
  }
#+END_SRC

