#+title: Interfaces
#+options: num:nil ^:nil creator:nil author:nil timestamp:nil

# 12

* =interfaces/FindDups.java=

#+BEGIN_SRC java -n :bangle FindDups.java :padline no
import java.util.HashSet;
import java.util.Set;

public class FindDups {
  public static void main(String[] args) {
    Set<String> s = new HashSet<String>();
    for (String a : args) s.add(a);
    System.out.println(s.size() + " distinct words: " + s);
  }
}
#+END_SRC

* =interfaces/FindDups2.java=

#+BEGIN_SRC java -n :bangle FindDups2.java :padline no
import java.util.HashSet;
import java.util.Set;

public class FindDups2 {
  public static void main(String[] args) {
    Set<String> uniques = new HashSet<String>();
    Set<String> dups = new HashSet<String>();

    for (String a : args) if (!uniques.add(a)) dups.add(a);

    // Destructive set-difference
    uniques.removeAll(dups);

    System.out.println("Unique words:    " + uniques);
    System.out.println("Duplicate words: " + dups);
  }
}
#+END_SRC

* =interfaces/Shuffle.java=

#+BEGIN_SRC java -n :bangle Shuffle.java :padline no
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Shuffle {
  public static void main(String[] args) {
    List<String> list = Arrays.asList(args);
    Collections.shuffle(list);
    System.out.println(list);
  }
}
#+END_SRC

* =interfaces/Deal.java=

#+BEGIN_SRC java -n :bangle Deal.java :padline no
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Deal {
  public static void main(String[] args) {
    if (args.length < 2) {
      System.out.println("Usage: Deal hands cards");
      return;
    }
    int numHands = Integer.parseInt(args[0]);
    int cardsPerHand = Integer.parseInt(args[1]);

    // Make a normal 52-card deck.
    String[] suit = new String[] {"spades", "hearts", "diamonds", "clubs"};
    String[] rank =
        new String[] {"ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king"};
    List<String> deck = new ArrayList<String>();
    for (int i = 0; i < suit.length; i++) {
      for (int j = 0; j < rank.length; j++) {
        deck.add(rank[j] + " of " + suit[i]);
      }
    }

    // Shuffle the deck.
    Collections.shuffle(deck);

    if (numHands * cardsPerHand > deck.size()) {
      System.out.println("Not enough cards.");
      return;
    }

    for (int i = 0; i < numHands; i++) {
      System.out.println(dealHand(deck, cardsPerHand));
    }
  }

  public static <E> List<E> dealHand(List<E> deck, int n) {
    int deckSize = deck.size();
    List<E> handView = deck.subList(deckSize - n, deckSize);
    List<E> hand = new ArrayList<E>(handView);
    handView.clear();
    return hand;
  }
}
#+END_SRC

* =interfaces/Freq.java=

#+BEGIN_SRC java -n :bangle Freq.java :padline no
import java.util.HashMap;
import java.util.Map;

public class Freq {
  public static void main(String[] args) {
    Map<String, Integer> m = new HashMap<String, Integer>();

    // Initialize frequency table from command line
    for (String a : args) {
      Integer freq = m.get(a);
      m.put(a, (freq == null) ? 1 : freq + 1);
    }

    System.out.println(m.size() + " distinct words:");
    System.out.println(m);
  }
}
#+END_SRC

* =interfaces/Anagrams.java=

#+BEGIN_SRC java -n :bangle Anagrams.java :padline no
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Anagrams {
  public static void main(String[] args) {
    int minGroupSize = Integer.parseInt(args[1]);

    // Read words from file and put into a simulated multimap
    Map<String, List<String>> m = new HashMap<String, List<String>>();

    try {
      Scanner s = new Scanner(new File(args[0]));
      while (s.hasNext()) {
        String word = s.next();
        String alpha = alphabetize(word);
        List<String> l = m.get(alpha);
        if (l == null) {
          m.put(alpha, l = new ArrayList<String>());
        }
        l.add(word);
      }
    } catch (IOException e) {
      System.err.println(e);
      System.exit(1);
    }

    // Print all permutation groups above size threshold
    for (List<String> l : m.values()) {
      if (l.size() >= minGroupSize) {
        System.out.println(l.size() + ": " + l);
      }
    }
  }

  private static String alphabetize(String s) {
    char[] a = s.toCharArray();
    Arrays.sort(a);
    return new String(a);
  }
}
#+END_SRC

* =interfaces/Name.java=

#+BEGIN_SRC java -n :bangle Name.java :padline no
public class Name implements Comparable<Name> {
  private final String firstName;
  private final String lastName;

  public Name(String firstName, String lastName) {
    if (firstName == null || lastName == null) {
      throw new NullPointerException();
    }
    this.firstName = firstName;
    this.lastName = lastName;
  }

  public String firstName() {
    return firstName;
  }

  public String lastName() {
    return lastName;
  }

  public boolean equals(Object o) {
    if (!(o instanceof Name)) {
      return false;
    }
    Name n = (Name) o;
    return n.firstName.equals(firstName) && n.lastName.equals(lastName);
  }

  public int hashCode() {
    return 31 * firstName.hashCode() + lastName.hashCode();
  }

  public String toString() {
    return firstName + " " + lastName;
  }

  public int compareTo(Name n) {
    int lastCmp = lastName.compareTo(n.lastName);
    return (lastCmp != 0 ? lastCmp : firstName.compareTo(n.firstName));
  }
}
#+END_SRC

* =interfaces/ArrayDequeSample.java=

#+BEGIN_SRC java -n :bangle ArrayDequeSample.java :padline no
/** ArrayDequeSample.java creates and prints the contents of an ArrayDeque. */
import java.util.ArrayDeque;
import java.util.Iterator;

public class ArrayDequeSample {
  public static void main(String[] args) {
    ArrayDeque<String> aDeque = new ArrayDeque<>();

    aDeque.addFirst("tea");
    aDeque.addFirst("milk");
    aDeque.addFirst("coffee");
    aDeque.addLast("sugar");

    /* Iterate through elements in an ArrayDeque instance */
    for (Iterator<String> itr = aDeque.iterator(); itr.hasNext(); ) {
      System.out.println(itr.next());
    }
    System.out.println();

    aDeque.addFirst("juice");
    aDeque.addLast("honey");

    System.out.println("First Element : " + aDeque.getFirst());
    System.out.println("Last Element : " + aDeque.getLast());

    /* Removal of the Deque Elements */
    System.out.println("First Element(Removed):" + aDeque.removeFirst());
    System.out.println("Last Element Removed:" + aDeque.removeLast());

    System.out.println("%nPopped Element : " + aDeque.pop());
    System.out.println("%n Size of Array Deque: " + aDeque.size());
  }
}
#+END_SRC

* =interfaces/NameSort.java=

#+BEGIN_SRC java -n :bangle NameSort.java :padline no
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class NameSort {
  public static void main(String[] args) {
    Name[] nameArray = {
      new Name("John", "Smith"),
      new Name("Karl", "Ng"),
      new Name("Jeff", "Smith"),
      new Name("Tom", "Rich")
    };

    List<Name> names = Arrays.asList(nameArray);
    Collections.sort(names);
    System.out.println(names);
  }
}
#+END_SRC

* =interfaces/ListTrim.java=

#+BEGIN_SRC java -n :bangle ListTrim.java :padline no
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;

public class ListTrim {
  static void listTrim(List<String> strings) {
    for (ListIterator<String> lit = strings.listIterator(); lit.hasNext(); ) {
      lit.set(lit.next().trim());
    }
  }

  public static void main(String[] args) {
    List<String> l = Arrays.asList(" red ", " white ", " blue ");
    listTrim(l);
    for (String s : l) {
      System.out.format("\"%s\"%n", s);
    }
  }
}
#+END_SRC

* =interfaces/OysterMonths.java=

#+BEGIN_SRC java -n :bangle OysterMonths.java :padline no
import java.text.DateFormatSymbols;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

public class OysterMonths {
  Collection<String> safeMonths;

  public Collection<String> filter(Collection<String> c) {

    Collection<String> filteredCollection = new ArrayList<String>();

    for (Iterator<String> i = c.iterator(); i.hasNext(); ) {
      String s = i.next();
      if (condition(s)) {
        filteredCollection.add(s);
      }
    }
    return filteredCollection;
  }

  public boolean condition(String s) {
    return s.contains("r");
  }

  public static void main(String[] args) {
    OysterMonths om = new OysterMonths();
    DateFormatSymbols dfs = new DateFormatSymbols();
    String[] monthArray = dfs.getMonths();
    Collection<String> months = Arrays.asList(monthArray);
    om.safeMonths = om.filter(months);
    System.out.println("The following months are safe for oysters:");
    System.out.println(om.safeMonths);
  }
}
#+END_SRC

* =interfaces/Ran.java=

#+BEGIN_SRC java -n :bangle Ran.java :padline no
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Ran {

  public static void main(String[] args) {

    // Get and shuffle the list of arguments
    List<String> argList = Arrays.asList(args);
    Collections.shuffle(argList);

    // Print out the elements using JDK 8 Streams
    argList.stream().forEach(e -> System.out.format("%s ", e));

    // Print out the elements using for-each
    for (String arg : argList) {
      System.out.format("%s ", arg);
    }

    System.out.println();
  }
}
#+END_SRC

