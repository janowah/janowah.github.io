#+title: keywords
#+options: ^:nil num:nil author:nil email:nil creator:nil timestamp:nil

# https://www.w3schools.com/java/

* flow

** loops

#+BEGIN_SRC java
  for   // Create a for loop
  do    // Used together with while to create a do-while loop
  while // Creates a while loop
#+END_SRC

** if/else

#+BEGIN_SRC java
  if   // Makes a conditional statement
  else // Used in conditional statements
#+END_SRC

** switch statement

#+BEGIN_SRC java
  switch  // Selects one of many code blocks to be executed
  case    // Marks a block of code in switch statements
  default // Specifies the default block of code in a switch statement
#+END_SRC

** try/ catch

#+BEGIN_SRC java
  try   // Creates a try...catch statement
  catch // Catches exceptions generated by try statements
#+END_SRC

** break/continue

#+BEGIN_SRC java
  break    // Breaks out of a loop or a switch block
  continue // Continues to the next iteration of a loop
#+END_SRC

** return

#+BEGIN_SRC java
  return // Finished the execution of a method, and can be used to
         // return a value from a method
#+END_SRC

* types

** numeric

#+BEGIN_SRC java
  byte   // A data type that can store whole numbers from -128 and 127

  short  // A data type that can store whole numbers from -32768 to
         // 32767

  int    // A data type that can store whole numbers from -2147483648 to
         // 2147483647

  long   // A data type that can store whole numbers from
         // -9223372036854775808 to 9223372036854775808

  double // A data type that can store whole numbers from 1.7e−308 to
         // 1.7e+308

  float  // A data type that can store whole numbers from 3.4e−038 to
         // 3.4e+038
#+END_SRC

** other

#+BEGIN_SRC java
  boolean // A data type that can only store true and false values
  char    // A data type that is used to store a single character
  enum    // Declares an enumerated (unchangeable) type
#+END_SRC

* modifiers

** access modifier

#+BEGIN_SRC java
  public    // An access modifier used for classes, attributes, methods
            // and constructors, making them accessible by any other
            // class

  private   // An access modifier used for attributes, methods and
            // constructors, making them only accessible within the
            // declared class

  protected // An access modifier used for attributes, methods and
            // constructors, making them accessible in the same package
            // and subclasses
#+END_SRC

** non-access modifier

#+BEGIN_SRC java
  static       // A non-access modifier used for methods and
               // attributes. Static methods/attributes can be accessed
               // without creating an object of a class

  abstract     // A non-access modifier. Used for classes and methods: An
               // abstract class cannot be used to create objects (to access
               // it, it must be inherited from another class). An abstract
               // method can only be used in an abstract class, and it does
               // not have a body. The body is provided by the subclass
               // (inherited from)

  final        // A non-access modifier used for classes, attributes and
               // methods, which makes them non-changeable (impossible to
               // inherit or override)

  transient    // A non-accesss modifier, which specifies that an attribute
               // is not part of an object's persistent state

  synchronized // A non-access modifier, which specifies that methods
               // can only be accessed by one thread at a time

  void         // Specifies that a method should not have a return value
#+END_SRC

* oo

#+BEGIN_SRC java
  class      // Defines a class

  extends    // Extends a class (indicates that a class is inherited
             // from another class)

  interface  // Used to declare a special type of class that only
             // contains abstract methods

  implements // Implements an interface

  new        // Creates new objects

  super      // Refers to superclass (parent) objects

  this       // Refers to the current object in a method or constructor
#+END_SRC

* exceptions and errors

#+BEGIN_SRC java
  finally // Used with exceptions, a block of code that will be executed
          // no matter if there is an exception or not
  
  throw   // Creates a custom error
    
  throws  // Indicates what exceptions may be thrown by a method
#+END_SRC

* packages and modules

#+BEGIN_SRC java
  import   // Used to import a package, class or interface
  package  // Declares a package
  exports  // Exports a package with a module. New in Java 9
  module   // Declares a module. New in Java 9
  requires // Specifies required libraries inside a module. New in Java 9
#+END_SRC

* others

#+BEGIN_SRC java
  assert     // For debugging

  instanceof // Checks whether an object is an instance of a specific
             // class or an interface

  native     // Specifies that a method is not implemented in the same
             // Java source file (but in another language)

  strictfp   // Restrict the precision and rounding of floating point
             // calculations

  var        // Declares a variable. New in Java 10

  volatile   // Indicates that an attribute is not cached
             // thread-locally, and is always read from the "main
             // memory"
#+END_SRC

Note:
#+BEGIN_SRC java
  true, false null // not keywords, but they are literals and reserved
                   // words that cannot be used as identifiers.
#+END_SRC

* not in use

#+BEGIN_SRC java
  const // Defines a constant. Not in use - use final instead
  goto  // Not in use, and has no function
#+END_SRC

[[./java.html][back]]
