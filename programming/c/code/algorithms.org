#+Title: Algorithms in C
#+OPTIONS: ^:nil num:nil author:nil email:nil creator:nil timestamp:nil

* Chapter 1. Introduction

** Program 1.1 Quick-find solution to connectivity problem

#+BEGIN_SRC c :tangle 1-1-quick-find.c
  #include <stdio.h>
  #define N 10000

  main()
  {
      int i, p, q, t, id[N];
      for (i = 0; i < N; i++)
          id[i] = i;
      while (scanf("%d %d\n", &p, &q) == 2) {
          if (id[p] == id[q])
              continue;
          for (t = id[p], i = 0; i < N; i++)
              if (id[i] == t)
                  id[i] = id[q];
          printf(" %d %d\n", p, q);
      }
  }
#+END_SRC

** Program 1.2 Quick-union solution to connectivity problem

#+BEGIN_SRC c :tangle 1-2-quick-union.c
  #include <stdio.h>
  #define N 10000

  main()
  {
      int i, p, q, t, id[N];
      for (i = 0; i < N; i++)
          id[i] = i;
      while (scanf("%d %d\n", &p, &q) == 2) {
          for (i = p; i != id[i]; i = id[i]);
          for (j = q; j != id[j]; j = id[j]);
          if (i == j)
              continue;
          id[i] = j;
          printf(" %d %d\n", p, q);
      }
  }
#+END_SRC

** Program 1.3 Weighted version of quick union

#+BEGIN_SRC c :tangle 1-3-weighted-quick-union.c
  #include <stdio.h>
  #define N 10000
  main()
    { int i, j, p, q, id[N], sz[N];
      for (i = 0; i < N; i++) 
        { id[i] = i; sz[i] = 1; }
      while (scanf("%d %d\n", &p, &q) == 2)
        { 
          for (i = p; i != id[i]; i = id[i]) ;
          for (j = q; j != id[j]; j = id[j]) ;
          if (i == j) continue;
          if (sz[i] < sz[j])
               { id[i] = j; sz[j] += sz[i]; }
          else { id[j] = i; sz[i] += sz[j]; }
          printf(" %d %d\n", p, q);
        }
   }
#+END_SRC

** Program 1.4 Path compression by halving

#+BEGIN_SRC c :tangle 1-4-path-compression.c
  for (i = p; i != id[i]; i = id[i]) 
    { int t = i; i = id[id[t]]; id[t] = i; } 
  for (j = q; j != id[j]; j = id[j]) ;
    { int t = j; j = id[id[t]]; id[t] = j; } 
#+END_SRC

* Chapter 2. Principles of Algorithm Analysis

** Program 2.1 Sequential search

#+BEGIN_SRC c
  int search(int a[], int v, int l, int r)
    { int i;
      for (i = l; i <= r; i++)
        if (v == a[i]) return i;
      return -1;
    }
#+END_SRC

** Program 2.2 Binary search

#+BEGIN_SRC c
  int search(int a[], int v, int l, int r)
    { 
      while (r >= l)
        { int m = (l+r)/2;
          if (v == a[m]) return m;
          if (v < a[m]) r = m-1; else l = m+1;
        }
      return -1;
    }
#+END_SRC

* Chapter 3. Elementary Data Structures

** 3.1 Building Blocks

*** Program 3.1 Function definition

#+BEGIN_SRC c :tangle 3-01.c
  #include <stdio.h>

  int lg(int);

  main()
  {
      int i, N;
      for (i = 1, N = 10; i <= 6; i++, N *= 10)
          printf("%7d %2d %9d\n", N, lg(N), N * lg(N));
  }

  int lg(int N)
  {
      int i;
      for (i = 0; N > 0; i++, N /= 2);
      return i;
  }
#+END_SRC

*** Program 3.2 Types of numbers

- missing stdio.h and math.h
- gcc 3-02.c -lm
- ./a.out 2

#+BEGIN_SRC c :tangle 3-02.c
  #include <stdlib.h>
  #include <stdio.h>
  #include <math.h>

  typedef int numType;

  numType randNum()
  {
      return rand();
  }

  main(int argc, char *argv[])
  {
      int i, N = atoi(argv[1]);
      float m1 = 0.0, m2 = 0.0;
      numType x;
      for (i = 0; i < N; i++) {
          x = randNum();
          m1 += ((float) x) / N;
          m2 += ((float) x * x) / N;
      }
      printf("       Average: %f\n", m1);
      printf("Std. deviation: %f\n", sqrt(m2 - m1 * m1));
  }
#+END_SRC

*** Program 3.3 Point data type interface

#+BEGIN_SRC c :tangle Point.h
  typedef struct {
      float x;
      float y;
  } point;
  float distance(point a, point b);
#+END_SRC

*** Program 3.4 Point data type implementation

#+BEGIN_SRC c :tangle distance.c
  #include <math.h>
  #include "Point.h"
  float distance(point a, point b)
  {
      float dx = a.x - b.x, dy = a.y - b.y;
      return sqrt(dx * dx + dy * dy);
  }
#+END_SRC

** 3.2 Arrays

*** Program 3.5 Sieve of Eratosthenes

- missing stdio.h

#+BEGIN_SRC c :tangle 3-05.c
  #include <stdio.h>

  #define N 10000

  main()
  {
      int i, j, a[N];
      for (i = 2; i < N; i++)
          a[i] = 1;
      for (i = 2; i < N; i++)
          if (a[i])
              for (j = i; j < N / i; j++)
                  a[i * j] = 0;
      for (i = 2; i < N; i++)
          if (a[i])
              printf("%4d ", i);
      printf("\n");
  }
#+END_SRC

*** Program 3.6 Dynamic memory allocation for an array

- ./a.out 1000000. took a couple of minutes

#+BEGIN_SRC c :tangle 3-06.c
  #include <stdlib.h>
  #include <stdio.h>

  main(int argc, char *argv[])
  {
      long int i, j, N = atoi(argv[1]);
      int *a = malloc(N * sizeof(int));
      if (a == NULL) {
          printf("Insufficient memory.\n");
          return;
      }
      for (i = 2; i < N; i++)
          a[i] = 1;
      for (i = 2; i < N; i++)
          if (a[i])
              for (j = i; j < N / i; j++)
                  a[i * j] = 0;
      for (i = 2; i < N; i++)
          if (a[i])
              printf("%4d ", i);
      printf("\n");
  }
#+END_SRC

*** Program 3.7 Coin-flipping simulation

- ./a.out 32 1000
- note. it will seg fault with no command line arguments
  - should have a check
- it always returns the same values with the same arguments.
- N first argument. no of coin tosses
- M second argument. no of experiments/ trials

#+BEGIN_SRC c :tangle 3-07.c
  #include <stdlib.h>
  #include <stdio.h>

  int heads()
  {
      return rand() < RAND_MAX / 2;
  }

  main(int argc, char *argv[])
  {
      int i, j, cnt;
      int N = atoi(argv[1]), M = atoi(argv[2]);
      int *f = malloc((N + 1) * sizeof(int));
      for (j = 0; j <= N; j++)
          f[j] = 0;
      for (i = 0; i < M; i++, f[cnt]++)
          for (cnt = 0, j = 0; j <= N; j++)
              if (heads())
                  cnt++;
      for (j = 0; j <= N; j++) {
          printf("%2d ", j);
          for (i = 0; i < f[j]; i += 10)
              printf("*");
          printf("\n");
      }
  }
#+END_SRC

*** Program 3.8 Closest-point computation

N 1st. number of pairs 
d 2nd. length less than

 gcc 3-08.c distance.c -lm
./a.out 4 2

4 pairs of points (8 points) 
distance less than 2
note: random number generator isn't random

printf("%f %f\n",a[i].x,a[i].y); to see same results from rng

#+BEGIN_SRC c :tangle 3-08.c
  #include <math.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include "Point.h"

  float randFloat()
  {
      return 1.0 * rand() / RAND_MAX;
  }

  main(int argc, char *argv[])
  {
      float d = atof(argv[2]);
      int i, j, cnt = 0, N = atoi(argv[1]);
      point *a = malloc(N * (sizeof(*a)));
      for (i = 0; i < N; i++) {
          a[i].x = randFloat();
          a[i].y = randFloat();
      }
      for (i = 0; i < N; i++)
          for (j = i + 1; j < N; j++)
              if (distance(a[i], a[j]) < d)
                  cnt++;
      printf("%d edges shorter than %f\n", cnt, d);
  }
#+END_SRC

** 3.3 Linked Lists

*** Program 3.9 Circular list example (Josephus problem)

- N people
- eliminate every Mth person
- gcc 3-09.c 
- ./a.out 9 5 
- ex. N = 9 and}vI 5

- segmentation fault with no inputs

look at printing all the nodes in the list

#+BEGIN_SRC c :tangle 3-09.c
  #include <stdlib.h>
  #include <stdio.h>

  typedef struct node *link;
  struct node {
      int item;
      link next;
  };

  main(int argc, char *argv[])
  {
      int i, N = atoi(argv[1]), M = atoi(argv[2]);
      link t = malloc(sizeof *t), x = t;
      t->item = 1;
      t->next = t;
      for (i = 2; i <= N; i++) {
          x = (x->next = malloc(sizeof *x));
          x->item = i;
          x->next = t;
      }
      while (x != x->next) {
          for (i = 1; i < M; i++)
              x = x->next;
          x->next = x->next->next;
          N--;
      }
      printf("%d\n", x->item);
  }
#+END_SRC

** 3.4 Elementary List Processing

*** Program 3.10 List reversal

#+BEGIN_SRC c reverse
  link reverse(link x)
  {
      link t, y = x, r = NULL;
      while (y != NULL) {
          t = y->next;
          y->next = r;
          r = y;
          y = t;
      }
      return r;
  }
#+END_SRC

*** Program 3.11 List insertion sort

see cc3-11.c which includes a main

#+BEGIN_SRC c :tangle 3-11.c
  struct node heada, headb;
  link t, u, x, a = &heada, b;
  for (i = 0, t = a; i < N; i++) {
      t->next = malloc(sizeof *t);
      t = t->next;
      t->next = NULL;
      t->item = rand() % 1000;
  }

  b = &headb;
  b->next = NULL;
  for (t = a->next; t != NULL; t = u) {
      u = t->next;
      for (x = b; x->next != NULL; x = x->next)
          if (x->next->item > t->item)
              break;
      t->next = x->next;
      x->next = t;
  }
#+END_SRC

*** Program 3.12 List-processing interface

#+BEGIN_SRC c :tangle list.h
  typedef struct node *link;
  struct node {
      itemType item;
      link next;
  };
  typedef link Node;
  void initNodes(int);
  link newNode(int);
  void freeNode(link);
  void insertNext(link, link);
  link deleteNext(link);
  link Next(link);
  int Item(link);
#+END_SRC

*** Program 3.13 List allocation for the Josephus problem

- gcc 3-13.c 3-14.c
- ./a.out 9 5
- not change itemtype to int in list.h

#+BEGIN_SRC c :tangle 3-13.c
  #include "list.h"
  #include <stdio.h>

  main(int argc, char *argv[])
  {
      int i, N = atoi(argv[1]), M = atoi(argv[2]);
      Node t, x;
      initNodes(N);
      for (i = 2, x = newNode(1); i <= N; i++) {
          t = newNode(i);
          insertNext(x, t);
          x = t;
      }
      while (x != Next(x)) {
          for (i = 1; i < M; i++)
              x = Next(x);
          freeNode(deleteNext(x));
      }
      printf("%d\n", Item(x));
  }
#+END_SRC

** 3.5 Memory Allocation for Lists

*** Program 3.14 Implementation of list-processing interface

#+BEGIN_SRC c :tangle 3-14.c
  #include <stdlib.h>
  #include "list.h"

  link freelist;

  void initNodes(int N)
  {
      int i;
      freelist = malloc((N + 1) * (sizeof *freelist));
      for (i = 0; i < N + 1; i++)
          freelist[i].next = &freelist[i + 1];
      freelist[N].next = NULL;
  }

  link newNode(int i)
  {
      link x = deleteNext(freelist);
      x->item = i;
      x->next = x;
      return x;
  }

  void freeNode(link x)
  {
      insertNext(freelist, x);
  }

  void insertNext(link x, link t)
  {
      t->next = x->next;
      x->next = t;
  }

  link deleteNext(link x)
  {
      link t = x->next;
      x->next = t->next;
      return t;
  }

  link Next(link x)
  {
      return x->next;
  }

  int Item(link x)
  {
      return x->item;
  }
#+END_SRC

** 3.6 Strings

*** Program 3.15 String search

- gcc -g 3-15.c

- ./a.out shine
- enter sunshine EOF
- the program returns 3 (position of the word in the sentence)

#+BEGIN_EXAMPLE
  ./a.out shine
  sunshine
  3 

  ./a.out fox
  the quick brown fox
  16 
#+END_EXAMPLE

#+BEGIN_SRC c :tangle 3-15.c
  #include <stdio.h>
  #define N 10000

  main(int argc, char *argv[])
  {
      int i, j, t;
      char a[N], *p = argv[1];
      for (i = 0; i < N - 1; a[i] = t, i++)
          if ((t = getchar()) == EOF)
              break;
      a[i] = 0;
      for (i = 0; a[i] != 0; i++) {
          for (j = 0; p[j] != 0; j++)
              if (a[i + j] != p[j])
                  break;
          if (p[j] == 0)
              printf("%d ", i);
      }
      printf("\n");
  }
#+END_SRC

** 3.7 Compound Data Structures

*** Program 3.16 Two-dimensional array allocation

#+BEGIN_SRC c
  int **malloc2d(int r, int c)
  {
      int i;
      int **t = malloc(r * sizeof(int *));
      for (i = 0; i < r; i++)
          t[i] = malloc(c * sizeof(int));
      return t;
  }
#+END_SRC

*** Program 3.17 Sorting an array of strings

- compilation warnings with qsort

#+BEGIN_EXAMPLE
./a.out 
the
quick
brown
fox
<EOF> C-d emacs shell
brown
fox
quick
the
#+END_EXAMPLE

#+BEGIN_SRC c :tangle 3-17.c
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>

  #define Nmax 1000
  #define Mmax 10000

  char buf[Mmax];
  int M = 0;

  int compare(void *i, void *j)
  {
      return strcmp(*(char **) i, *(char **) j);
  }

  main()
  {
      int i, N;
      char *a[Nmax];
      for (N = 0; N < Nmax; N++) {
          a[N] = &buf[M];
          if (scanf("%s", a[N]) == EOF)
              break;
          M += strlen(a[N]) + 1;
      }
      qsort(a, N, sizeof(char *), compare);
      for (i = 0; i < N; i++)
          printf("%s\n", a[i]);
  }
#+END_SRC

*** Program 3.18 Adjacency-matrix graph representation

need to define V

#+BEGIN_SRC c :tangle 3-18.c
  #include <stdio.h>
  #include <stdlib.h>

  main()
  {
      int i, j, adj[V][V];
      for (i = 0; i < V; i++)
          for (j = 0; j < V; j++)
              adj[i][j] = 0;
      for (i = 0; i < V; i++)
          adj[i][i] = 1;
      while (scanf("%d %d\n", &i, &j) == 2) {
          adj[i][j] = 1;
          adj[j][i] = 1;
      }
  }
#+END_SRC

*** Program 3.19 Adjacency-lists graph representation

- need to define V

#+BEGIN_SRC c :tangle 3-19.c
  #include <stdio.h>
  #include <stdlib.h>

  typedef struct node *link;
  struct node {
      int v;
      link next;
  };
  link NEW(int v, link next)
  {
      link x = malloc(sizeof *x);
      x->v = v;
      x->next = next;
      return x;
  }

  main()
  {
      int i, j;
      link adj[V];
      for (i = 0; i < V; i++)
          adj[i] = NULL;
      while (scanf("%d %d\n", &i, &j) == 2) {
          adj[j] = NEW(i, adj[j]);
          adj[i] = NEW(j, adj[i]);
      }
  }

#+END_SRC

*** Program 3.20 A two-dimensional array of lists

#+BEGIN_SRC c
  #include <math.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include "Point.h"

  typedef struct node *link;

  struct node {
      point p;
      link next;
  };
  link **grid;
  int G;
  float d;
  int cnt = 0;

  gridinsert(float x, float y)
  {
      int i, j;
      link s;
      int X = x * G + 1;
      int Y = y * G + 1;
      link t = malloc(sizeof *t);
      t->p.x = x;
      t->p.y = y;
      for (i = X - 1; i <= X + 1; i++)
          for (j = Y - 1; j <= Y + 1; j++)
              for (s = grid[i][j]; s != NULL; s = s->next)
                  if (distance(s->p, t->p) < d)
                      cnt++;
      t->next = grid[X][Y];
      grid[X][Y] = t;
  }

  main(int argc, char *argv[])
  {
      int i, j, N = atoi(argv[1]);
      d = atof(argv[2]);
      G = 1 / d;
      grid = malloc2d(G + 2, G + 2);
      for (i = 0; i < G + 2; i++)
          for (j = 0; j < G + 2; j++)
              grid[i][j] = NULL;
      for (i = 0; i < N; i++)
          gridinsert(randFloat(), randFloat());
      printf("%d edges shorter than %f\n", cnt, d);
  }
#+END_SRC

** not in chapter

#+BEGIN_SRC c
  #include <math.h>
  #include <stdlib.h>

  typedef int numType;
  #define R 1000

  numType randNum()
  {
      return rand() % R;
  }

  main(int argc, char *argv[])
  {
      int i, N = atoi(argv[1]);
      int *f = malloc(R * sizeof(int));
      float m1 = 0.0, m2 = 0.0, t = 0.0;
      numType x;
      for (i = 0; i < R; i++)
          f[i] = 0;
      for (i = 0; i < N; i++) {
          f[x = randNum()]++;
          m1 += (float) x / N;
          m2 += (float) x *x / N;
      }
      for (i = 0; i < R; i++)
          t += f[i] * f[i];
      printf("       Average: %f\n", m1);
      printf("Std. deviation: %f\n", sqrt(m2 - m1 * m1));
      printf("    Chi-square: %f\n", (R * t / N) - N);
  }
#+END_SRC

* Chapter 4. Abstract Data Types

** 4.1 Abstract Objects and Collections of Objects

no code

** 4.2 Pushdown Stack ADT

*** Program 4.1 Pushdown-stack ADT interface

#+BEGIN_SRC c :mkdirp yes :tangle stack/STACK.h
  void STACKinit(int);
  int STACKempty();
  void STACKpush(Item);
  Item STACKpop();
#+END_SRC

** 4.3 Examples of Stack ADT Clients

*** Program 4.2 Postfix-expression evaluation

- gcc 4-02.c 4-04.c
- or
- gcc 4-02.c 4-05.c 
- ./a.out "5 9 8 + 4 6 * * 7 + *"

#+BEGIN_SRC c :mkdirp yes :tangle stack/4-02.c
  /* Program 4.2 Postfix-expression evaluation */

  #include <stdio.h>
  #include <string.h>
  #include "Item.h"
  #include "STACK.h"

  main(int argc, char *argv[])
  {
      char *a = argv[1];
      int i, N = strlen(a);
      STACKinit(N);
      for (i = 0; i < N; i++) {
          if (a[i] == '+')
              STACKpush(STACKpop() + STACKpop());
          if (a[i] == '*')
              STACKpush(STACKpop() * STACKpop());
          if ((a[i] >= '0') && (a[i] <= '9'))
              STACKpush(0);
          while ((a[i] >= '0') && (a[i] <= '9'))
              STACKpush(10 * STACKpop() + (a[i++] - '0'));
      }
      printf("%d \n", STACKpop());
  }
#+END_SRC

*** Program 4.3 Infix-to-postfix conversion

- gcc 4-03.c 4-05.c
- or
- gcc 4-03.c 4-04.c 
- ./a.out "(5 * (((9 + 8) * (4 * 6)) + 7))"
- => 5 9 8 + 4 6 * * 7 + * 

#+BEGIN_SRC c :mkdirp yes :tangle stack/4-03.c
  /* Program 4.3 Infix-to-postfix conversion */

  #include <stdio.h>
  #include <string.h>
  #include "Item.h"
  #include "STACK.h"

  main(int argc, char *argv[])
  {
      char *a = argv[1];
      int i, N = strlen(a);
      STACKinit(N);
      for (i = 0; i < N; i++) {
          if (a[i] == ')')
              printf("%c ", STACKpop());
          if ((a[i] == '+') || (a[i] == '*'))
              STACKpush(a[i]);
          if ((a[i] >= '0') && (a[i] <= '9'))
              printf("%c ", a[i]);
      }
      printf("\n");
  }
#+END_SRC

** 4.4 Stack ADT Implementations

*** Program 4.4 Array implementation of a pushdown stack

#+BEGIN_SRC c :mkdirp yes :tangle stack/4-04.c
  /* Array implementation of a pushdown stack */

  #include <stdlib.h>
  #include "Item.h"
  #include "STACK.h"

  static Item *s;
  static int N;

  void STACKinit(int maxN)
  {
      s = malloc(maxN * sizeof(Item));
      N = 0;
  }

  int STACKempty()
  {
      return N == 0;
  }

  void STACKpush(Item item)
  {
      s[N++] = item;
  }

  Item STACKpop()
  {
      return s[--N];
  }
#+END_SRC

*** Program 4.5 Linked-list implementation of a pushdown stack

#+BEGIN_SRC c :mkdirp yes :tangle stack/4-05.c
  /* Linked-list implementation of a pushdown stack */

  #include <stdlib.h>
  #include "Item.h"

  typedef struct STACKnode *link;

  struct STACKnode {
      Item item;
      link next;
  };

  static link head;

  link NEW(Item item, link next)
  {
      link x = malloc(sizeof *x);
      x->item = item;
      x->next = next;
      return x;
  }

  void STACKinit(int maxN)
  {
      head = NULL;
  }

  int STACKempty()
  {
      return head == NULL;
  }

  STACKpush(Item item)
  {
      head = NEW(item, head);
  }

  Item STACKpop()
  {
      Item item = head->item;
      link t = head->next;
      free(head);
      head = t;
      return item;
  }
#+END_SRC

** 4.5 Creation of a New ADT

*** Program 4.6 Equivalence-relations ADT interface

#+BEGIN_SRC c :mkdirp yes :tangle uf/UF.h
  void UFinit(int);
  int UFfind(int, int);
  int UFunion(int, int);
#+END_SRC

*** Program 4.7 Equivalence-relations ADT client

- gcc 4-07.c 4-08.c
- ./a.out 3 4
  - same as the examples in chapter 1

#+BEGIN_SRC c :mkdirp yes :tangle uf/4-07.c
  #include <stdio.h>
  #include "UF.h"

  main(int argc, char *argv[])
  {
      int p, q, N = atoi(argv[1]);
      UFinit(N);
      while (scanf("%d %d", &p, &q) == 2)
          if (!UFfind(p, q)) {
              UFunion(p, q);
              printf(" %d %d\n", p, q);
          }
  }
#+END_SRC

*** Program 4.8 Equivalence-relations ADT implementation

#+BEGIN_SRC c :mkdirp yes :tangle uf/4-08.c
  #include <stdlib.h>
  #include "UF.h"

  static int *id, *sz;

  void UFinit(int N)
  {
      int i;
      id = malloc(N * sizeof(int));
      sz = malloc(N * sizeof(int));
      for (i = 0; i < N; i++) {
          id[i] = i;
          sz[i] = 1;
      }
  }

  int find(int x)
  {
      int i = x;
      while (i != id[i])
          i = id[i];
      return i;
  }

  int UFfind(int p, int q)
  {
      return (find(p) == find(q));
  }

  int UFunion(int p, int q)
  {
      int i = find(p), j = find(q);
      if (i == j)
          return;
      if (sz[i] < sz[j]) {
          id[i] = j;
          sz[j] += sz[i];
      } else {
          id[j] = i;
          sz[i] += sz[j];
      }
  }
#+END_SRC

** 4.6 FIFO Queues and Generalized Queues

*** Program 4.9 FIFO queue ADT interface

#+BEGIN_SRC c :mkdirp yes :tangle fifo/QUEUE.h
  void QUEUEinit(int);
  int QUEUEempty();
  void QUEUEput(Item);
  Item QUEUEget();
#+END_SRC

*** Program 4.10 FIFO queue linked-list implementation

#+BEGIN_SRC c :mkdirp yes :tangle fifo/4-10.c
  #include <stdlib.h>
  #include "Item.h"
  #include "QUEUE.h"

  typedef struct QUEUEnode *link;

  struct QUEUEnode {
      Item item;
      link next;
  };

  static link head, tail;

  link NEW(Item item, link next)
  {
      link x = malloc(sizeof *x);
      x->item = item;
      x->next = next;
      return x;
  }

  void QUEUEinit(int maxN)
  {
      head = NULL;
  }

  int QUEUEempty()
  {
      return head == NULL;
  }

  QUEUEput(Item item)
  {
      if (head == NULL) {
          head = (tail = NEW(item, head));
          return;
      }
      tail->next = NEW(item, tail->next);
      tail = tail->next;
  }

  Item QUEUEget()
  {
      Item item = head->item;
      link t = head->next;
      free(head);
      head = t;
      return item;
  }
#+END_SRC

*** Program 4.11 FIFO queue array implementation

#+BEGIN_SRC c :mkdirp yes :tangle fifo/4-11.c
  #include <stdlib.h>
  #include "Item.h"

  static Item *q;
  static int N, head, tail;

  void QUEUEinit(int maxN)
  {
      q = malloc((maxN + 1) * sizeof(Item));
      N = maxN + 1;
      head = N;
      tail = 0;
  }

  int QUEUEempty()
  {
      return head % N == tail;
  }

  void QUEUEput(Item item)
  {
      q[tail++] = item;
      tail = tail % N;
  }

  Item QUEUEget()
  {
      head = head % N;
      return q[head++];
  }

#+END_SRC

** 4.7 Duplicate and Index Items

*** Program 4.12 Stack with index items and no duplicates

#+BEGIN_SRC c :mkdirp yes :tangle no-dup-stack/4-12.c
  #include <stdlib.h>

  static int *s, *t;
  static int N;

  void STACKinit(int maxN)
  {
      int i;
      s = malloc(maxN * sizeof(int));
      t = malloc(maxN * sizeof(int));
      for (i = 0; i < maxN; i++)
          t[i] = 0;
      N = 0;
  }

  int STACKempty()
  {
      return !N;
  }

  void STACKpush(int item)
  {
      if (t[item] == 1)
          return;
      s[N++] = item;
      t[item] = 1;
  }

  int STACKpop()
  {
      N--;
      t[s[N]] = 0;
      return s[N];
  }
#+END_SRC

** 4.8 First-Class ADTs

*** Program 4.13 Complex numbers driver (roots of unity)

- gcc 4-13.c 4-15.c -lm

#+BEGIN_EXAMPLE
  ./a.out 8
  8th complex roots of unity
   0  1.000  0.000  1.000  0.000
   1  0.707  0.707  1.000  0.000
   2 -0.000  1.000  1.000  0.000
   3 -0.707  0.707  1.000  0.000
   4 -1.000 -0.000  1.000  0.000
   5 -0.707 -0.707  1.000 -0.000
   6  0.000 -1.000  1.000  0.000
   7  0.707 -0.707  1.000 -0.000
#+END_EXAMPLE

#+BEGIN_SRC c :tangle 4-13.c
  #include <stdio.h>
  #include <math.h>
  #include "COMPLEX.h"

  #define PI 3.141592625

  main(int argc, char *argv[])
  {
      int i, j, N = atoi(argv[1]);
      Complex t, x;
      printf("%dth complex roots of unity\n", N);
      for (i = 0; i < N; i++) {
          float r = 2.0 * PI * i / N;
          t = COMPLEXinit(cos(r), sin(r));
          printf("%2d %6.3f %6.3f ", i, Re(t), Im(t));
          for (x = t, j = 0; j < N - 1; j++)
              x = COMPLEXmult(t, x);
          printf("%6.3f %6.3f\n", Re(x), Im(x));
      }
  }
#+END_SRC

*** Program 4.14 First-class data type for complex numbers

#+BEGIN_SRC c :tangle COMPLEX.h
  typedef struct {
      float Re;
      float Im;
  } Complex;
  Complex COMPLEXinit(float, float);
  float Re(Complex);
  float Im(Complex);
  Complex COMPLEXmult(Complex, Complex);
#+END_SRC

*** Program 4.15 Complex-numbers data-type implementation

#+BEGIN_SRC c :tangle 4-15.c
  #include "COMPLEX.h"

  Complex COMPLEXinit(float Re, float Im)
  {
      Complex t;
      t.Re = Re;
      t.Im = Im;
      return t;
  }

  float Re(Complex z)
  {
      return z.Re;
  }

  float Im(Complex z)
  {
      return z.Im;
  }

  Complex COMPLEXmult(Complex a, Complex b)
  {
      Complex t;
      t.Re = a.Re * b.Re - a.Im * b.Im;
      t.Im = a.Re * b.Im + a.Im * b.Re;
      return t;
  }

#+END_SRC

*** Program 4.16 First-class ADT for complex numbers

#+BEGIN_SRC c :tangle aCOMPLEX.h
  typedef struct complex *Complex;
  Complex COMPLEXinit(float, float);
  float Re(Complex);
  float Im(Complex);
  Complex COMPLEXmult(Complex, Complex);
#+END_SRC

*** Program 4.17 Complex-numbers ADT implementation

- use 4-13.c as driver.  need to change COMPLEX.h

#+BEGIN_SRC c :tangle 4-14.c
  #include <stdlib.h>
  #include "aCOMPLEX.h"

  struct complex {
      float Re;
      float Im;
  };

  Complex COMPLEXinit(float Re, float Im)
  {
      Complex t = malloc(sizeof *t);
      t->Re = Re;
      t->Im = Im;
      return t;
  }

  float Re(Complex z)
  {
      return z->Re;
  }

  float Im(Complex z)
  {
      return z->Im;
  }

  Complex COMPLEXmult(Complex a, Complex b)
  {
      return COMPLEXinit(Re(a) * Re(b) - Im(a) * Im(b),
                         Re(a) * Im(b) + Im(a) * Re(b));
  }
#+END_SRC

*** Program 4.18 First-class ADT interface for queues

#+BEGIN_SRC c :tangle aQUEUE.h
  typedef struct queue *Q;
  void QUEUEdump(Q);
  Q QUEUEinit(int maxN);
  int QUEUEempty(Q);
  void QUEUEput(Q, Item);
  Item QUEUEget(Q);
#+END_SRC

*** Program 4.19 Queue client program (queue simulation)

gcc 4-19.c 4-20.c 
./a.out 84

just outputs all zeros.  something wrong somewhere

there are two bugs
missing ; // in notes not in code
j instead of i in both book and code

i don't get the same results that he has in the book
the book looks wrong.  missing numbers 85-89 and has 90

#+BEGIN_SRC c :tangle 4-19.c
  #include <stdio.h>
  #include <stdlib.h>
  #include "Item.h"
  #include "QUEUE.h"

  #define M 10

  main(int argc, char *argv[])
  {
      int i, j, N = atoi(argv[1]);
      Q queues[M];
      for (i = 0; i < M; i++)
          queues[i] = QUEUEinit(N);
      for (i = 0; i < N; i++)
          QUEUEput(queues[rand() % M], j);
      for (i = 0; i < M; i++, printf("\n"))
          for (j = 0; !QUEUEempty(queues[i]); j++)
              printf("%3d ", QUEUEget(queues[i]));
  }
#+END_SRC

*** Program 4.20 Linked-list implementation of first-class queue

#+BEGIN_SRC c :tangle 4-20.c
  #include <stdlib.h>
  #include "Item.h"
  #include "QUEUE.h"

  typedef struct QUEUEnode *link;

  struct QUEUEnode {
      Item item;
      link next;
  };

  struct queue {
      link head;
      link tail;
  };

  link NEW(Item item, link next)
  {
      link x = malloc(sizeof *x);
      x->item = item;
      x->next = next;
      return x;
  }

  Q QUEUEinit(int maxN)
  {
      Q q = malloc(sizeof *q);
      q->head = NULL;
      q->tail = NULL;
      return q;
  }

  int QUEUEempty(Q q)
  {
      return q->head == NULL;
  }

  void QUEUEput(Q q, Item item)
  {
      if (q->head == NULL) {
          q->tail = NEW(item, q->head)
              q->head = q->tail;
          return;
      }
      q->tail->next = NEW(item, q->tail->next);
      q->tail = q->tail->next;
  }

  Item QUEUEget(Q q)
  {
      Item item = q->head->item;
      link t = q->head->next;
      free(q->head);
      q->head = t;
      return item;
  }
#+END_SRC

** 4.9 Application-Based ADT Example

*** Program 4.21 Polynomial client (binomial coefficients)

#+BEGIN_SRC c :tangle 4-21.c
  #include <stdio.h>
  #include <stdlib.h>
  #include "POLY.h"

  main(int argc, char *argv[])
  {
      int N = atoi(argv[1]);
      float p = atof(argv[2]);
      Poly t, x;
      int i, j;
      printf("Binomial coefficients\n");
      t = POLYadd(POLYterm(1, 1), POLYterm(1, 0));
      for (i = 0, x = t; i < N; i++) {
          x = POLYmult(t, x);
          showPOLY(x);
      }
      printf("%f\n", POLYeval(x, p));
  }
#+END_SRC

*** Program 4.22 First-class ADT interface for polynomials

#+BEGIN_SRC c :tangle POLY.h
  typedef struct poly *Poly;
  void showPOLY(Poly);
  Poly POLYterm(int, int);
  Poly POLYadd(Poly, Poly);
  Poly POLYmult(Poly, Poly);
  float POLYeval(Poly, float);
#+END_SRC

*** Program 4.23 Array implementation of polynomial ADT

there is no void showPOLY(Poly);

#+BEGIN_SRC c :tangle 4-23.c
  #include <stdlib.h>
  #include "POLY.h"

  struct poly {
      int N;
      int *a;
  };

  Poly POLYterm(int coeff, int exp)
  {
      int i;
      Poly t = malloc(sizeof *t);
      t->a = malloc((exp + 1) * sizeof(int));
      t->N = exp + 1;
      t->a[exp] = coeff;
      for (i = 0; i < exp; i++)
          t->a[i] = 0;
      return t;
  }

  Poly POLYadd(Poly p, Poly q)
  {
      int i;
      Poly t;
      if (p->N < q->N) {
          t = p;
          p = q;
          q = t;
      }
      for (i = 0; i < q->N; i++)
          p->a[i] += q->a[i];
      return p;
  }

  Poly POLYmult(Poly p, Poly q)
  {
      int i, j;
      Poly t = POLYterm(0, (p->N - 1) + (q->N - 1));
      for (i = 0; i < p->N; i++)
          for (j = 0; j < q->N; j++)
              t->a[i + j] += p->a[i] * q->a[j];
      return t;
  }

  float POLYeval(Poly p, float x)
  {
      int i;
      double t = 0.0;
      for (i = p->N - 1; i >= 0; i--)
          t = t * x + p->a[i];
      return t;
  }
#+END_SRC

** 4.10 Perspective

no code

* Chapter 5. Recursion and Trees

** 5.1 Recursive Algorithms

*** Program 5.1 Factorial function (recursive implementation)

#+BEGIN_SRC c :mkdirp yes :tangle factorial/5-01.c
  /* Factorial function (recursive implementation) */
  int factorial(int N)
  {
      if (N == 0)
          return 1;
      return N * factorial(N - 1);
  }
#+END_SRC

*** Program 5.2 A questionable recursive program

#+BEGIN_SRC c :mkdirp yes :tangle puzzle/5-02.c
  /* A questionable recursive program */
  int puzzle(int N)
  {
      if (N == 1)
          return 1;
      if (N % 2 == 0)
          return puzzle(N / 2);
      else
          return puzzle(3 * N + 1);
  }
#+END_SRC

*** Program 5.3 Euclid's algorithm

#+BEGIN_SRC c :mkdirp yes :tangle euclid/5-03.c
  /* Euclid's algorithm */
  int gcd(int m, int n)
  {
      if (n == 0)
          return m;
      return gcd(n, m % n);
  }
#+END_SRC

*** Program 5.4 Recursive program to evaluate prefix expressions

works. but can't figure how to print the value of the runnning total

#+BEGIN_SRC c :mkdirp yes :tangle prefix-exp/5-04.c
  /* Recursive program to evaluate prefix expressions */
  char *a;
  int i;
  int eval()
  {
      int x = 0;
      while (a[i] == ' ')
          i++;
      if (a[i] == '+') {
          i++;
          return eval() + eval();
      }
      if (a[i] == '*') {
          i++;
          return eval() * eval();
      }
      while ((a[i] >= '0') && (a[i] <= '9'))
          x = 10 * x + (a[i++] - '0');
      return x;
  }
#+END_SRC

*** Program 5.5 Examples of recursive functions for linked lists

#+BEGIN_SRC c :mkdirp yes :tangle linked-list/5-05.c
int count(link x)
  { 
    if (x == NULL) return 0;
    return 1 + count(x->next); 
  }
void traverse(link h, void (*visit)(link))
  { 
    if (h == NULL) return;
    (*visit)(h); 
    traverse(h->next, visit);
  }
void traverseR(link h, void (*visit)(link))
  { 
    if (h == NULL) return;
    traverseR(h->next, visit);
    (*visit)(h); 
  }
link delete(link x, Item v)
  { 
    if (x == NULL) return NULL;
    if (eq(x->item, v))
      { link t = x->next; free(x); return t; }
    x->next = delete(x->next, v);
    return x;
  }
#+END_SRC

** 5.2 Divide and Conquer

*** Program 5.6 Divide-and-conquer to find the maximum

#+BEGIN_SRC c :mkdirp yes :tangle divide/5-06.c
  /* Divide-and-conquer to find the maximum */
  Item max(Item a[], int l, int r)
  {
      Item u, v;
      int m = (l + r) / 2;
      if (l == r)
          return a[l];
      u = max(a, l, m);
      v = max(a, m + 1, r);
      if (u > v)
          return u;
      else
          return v;
  }
#+END_SRC

*** Program 5.7 Solution to the towers of Hanoi

#+BEGIN_SRC c :mkdirp yes :tangle towers-of-hanoi/5-07.c
  void hanoi(int N, int d)
  {
      if (N == 0)
          return;
      hanoi(N - 1, -d);
      shift(N, d);
      hanoi(N - 1, -d);
  }
#+END_SRC

*** Program 5.8 Divide and conquer to draw a ruler

#+BEGIN_SRC c :mkdirp yes :tangle ruler/5-08.c
rule(int l, int r, int h)
  { int m = (l+r)/2;
    if (h > 0)
      { 
        rule(l, m, h-1);
        mark(m, h);
        rule(m, r, h-1);
      }
  }
#+END_SRC

*** Program 5.9 Nonrecursive program to draw a ruler

#+BEGIN_SRC c :mkdirp yes :tangle ruler/5-09.c
rule(int l, int r, int h)
  { 
    int i, j, t;
    for (t = 1, j = 1; t <= h; j += j, t++)
      for (i = 0; l+j+i <= r; i += j+j)
        mark(l+j+i, t);
  }
#+END_SRC

** 5.3 Dynamic Programming

*** Program 5.10 Fibonacci numbers (recursive implementation)

"This program is not usable because it takes exponential time to
compute FN."

#+BEGIN_SRC c :mkdirp yes :tangle 5-10.c
int F(int i)
  { 
    if (i < 1) return 0;
    if (i == 1) return 1;
    return F(i-1) + F(i-2);
  }
#+END_SRC

*** Program 5.11 Fibonacci numbers (dynamic programming)

#+BEGIN_SRC c :mkdirp yes :tangle 5-11.c
int F(int i)
  { int t;
    if (knownF[i] != unknown) return knownF[i];
    if (i == 0) t = 0;
    if (i == 1) t = 1;
    if (i > 1) t = F(i-1) + F(i-2);
    return knownF[i] = t; 
  }
#+END_SRC

*** Program 5.12 Knapsack problem (recursive implementation)

"do not use this program, because it will take exponential time"

#+BEGIN_SRC c :mkdirp yes :tangle 5-12.c
int knap(int cap)
  { int i, space, max, t;
    for (i = 0, max = 0; i < N; i++)
      if ((space = cap-items[i].size) >= 0)
        if ((t = knap(space) + items[i].val) > max) 
          max = t;
    return max;     
  }
#+END_SRC

*** Program 5.13 Knapsack problem (dynamic programming)

#+BEGIN_SRC c :mkdirp yes :tangle 5-13.c
int knap(int M)
  { int i, space, max, maxi, t;
    if (maxKnown[M] != unknown) return maxKnown[M];
    for (i = 0, max = 0; i < N; i++)
      if ((space = M-items[i].size) >= 0)
        if ((t = knap(space) + items[i].val) > max)
          { max = t; maxi = i; }
    maxKnown[M] = max; itemKnown[M] = items[maxi];
    return max;     
  }
#+END_SRC

** 5.4 Trees

no code

** 5.5 Mathematical Properties of Binary Trees

no code

** 5.6 Tree Traversal

*** Program 5.14 Recursive tree traversal

#+BEGIN_SRC c :mkdirp yes :tangle 5-14.c
void traverse(link h, void (*visit)(link))
  { 
    if (h == NULL) return;
    (*visit)(h); 
    traverse(h->l, visit);
    traverse(h->r, visit);
  }
#+END_SRC

*** Program 5.15 Preorder traversal (nonrecursive)

#+BEGIN_SRC c
  void traverse(link h, void (*visit)(link))
    {
      STACKinit(max); STACKpush(h);
      while (!STACKempty())
        {
          (*visit)(h = STACKpop());
          if (h->r != NULL) STACKpush(h->r); 
          if (h->l != NULL) STACKpush(h->l); 
        }
    }
#+END_SRC

*** Program 5.16 Level-order traversal

#+BEGIN_SRC c
void traverse(link h, void (*visit)(link))
  {
    QUEUEinit(max); QUEUEput(h);
    while (!QUEUEempty())
      {
        (*visit)(h = QUEUEget());
        if (h->l != NULL) QUEUEput(h->l); 
        if (h->r != NULL) QUEUEput(h->r); 
      }
  }
#+END_SRC

** 5.7 Recursive Binary-Tree Algorithms

*** Program 5.I7 Computation of tree parameters

#+BEGIN_SRC c
  int count(link h)
    { 
      if (h == NULL) return 0;
      return count(h->l) + count(h->r) + 1;
    }
  int height(link h)
    { int u, v;
      if (h == NULL) return -1;
      u = height(h->l); v = height(h->r);
      if (u > v) return u+1; else return v+1;
    }
#+END_SRC

*** Program 5-18 Quick tree-print function

#+BEGIN_SRC c
  void printnode(char c, int h)
    { int i;
      for (i = 0; i < h; i++) printf("  ");
      printf("%c\n", c);
    }
  void show(link x, int h)
    { 
      if (x == NULL) { printnode("*", h); return; }
      show(x->r, h+1);    
      printnode(x->item, h);
      show(x->l, h+1);    
    }
#+END_SRC

*** Program 5.I9 Construction of a tournament

#+BEGIN_SRC c
  typedef struct node *link;
  struct node { Item item; link l, r };
  link NEW(Item item, link l, link r)
    { link x = malloc(sizeof *x); 
      x->item = item; x->l = l; x->r = r;
      return x;
    }
  link max(Item a[], int l, int r)
    { int m = (l+r)/2; Item u, v;
      link x = NEW(a[m], NULL, NULL);
      if (l == r) return x;
      x->l = max(a, l, m);
      x->r = max(a, m+1, r);
      u = x->l->item; v = x->r->item;
      if (u > v) 
        x->item = u; else x->item = v;
      return x;
    }
#+END_SRC

*** Program 5.20 Construction of a parse tree

#+BEGIN_SRC c
  char *a; int i;
  typedef struct Tnode* link;
  struct Tnode { char token; link l, r; };
  link NEW(char token, link l, link r)
    { link x = malloc(sizeof *x); 
      x->token = token; x->l = l; x->r = r;
      return x;
    }
  link parse()
    { char t = a[i++];
      link x = NEW(t, NULL, NULL);
      if ((t == '+') || (t == '*'))
        { x->l = parse(); x->r = parse(); }
      return x;
    }
#+END_SRC

** 5.8 Graph Traversal

*** Program 5.21 Depth-first search

#+BEGIN_SRC c
void traverse(int k, void (*visit)(int))
  { link t;
    (*visit)(k); visited[k] = 1;
    for (t = adj[k]; t != NULL; t = t->next)
      if (!visited[t->v]) traverse(t->v, visit);
  }
#+END_SRC

*** Program 5.22 Breadth-first search

#+BEGIN_SRC c
  void traverse(int k, void (*visit)(int))
    { link t;
      QUEUEinit(V); QUEUEput(k);
      while (!QUEUEempty())
        if (visited[k = QUEUEget()] == 0)
          {
            (*visit)(k); visited[k] = 1;
            for (t = adj[k]; t != NULL; t = t->next)
              if (visited[t->v] == 0) QUEUEput(t->v);
          }
    }
#+END_SRC

