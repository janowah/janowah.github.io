#+title: functions
#+options: ^:nil num:nil author:nil email:nil creator:nil timestamp:nil toc:nil
#+options: html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../style.css"/>

#+BEGIN_SRC elisp
  ;; - delete-duplicate-lines
  ;; - transpose-windows
  ;; - toggle-current-window-dedication
  ;; - remove-dos-eol
  ;; - ido-bookmark-jump
  ;; - unfill-paragraph
  ;; - org-begin-template
  ;; - xah-new-empty-buffer
  ;; - insert-todays-date
  ;; - ido-bookmark-insert

  ;;;;;;;;;;;;;;;;;;;;;;; delete-duplicate-lines ;;;;;;;;;;;;;;;;;;;;;;;
  (defun delete-duplicate-lines (beg end)
    (interactive "r")
    (let ((lines (split-string (buffer-substring beg end) "\n")))
      (delete-region beg end)
      (insert
       (mapconcat #'identity (delete-dups lines) "\n"))))

  ;;;;;;;;;;;;;;;;;;;;;;;;; transpose-windows ;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun transpose-windows (arg)
    "Transpose the buffers shown in two windows."
    (interactive "p")
    (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
      (while (/= arg 0)
        (let ((this-win (window-buffer))
              (next-win (window-buffer (funcall selector))))
          (set-window-buffer (selected-window) next-win)
          (set-window-buffer (funcall selector) this-win)
          (select-window (funcall selector)))
        (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

  ;;;;;;;;;;;;;;;;;; toggle-current-window-dedication ;;;;;;;;;;;;;;;;;;
  (defun toggle-current-window-dedication ()
    (interactive)
    (let* ((window    (selected-window))
           (dedicated (window-dedicated-p window)))
      (set-window-dedicated-p window (not dedicated))
      (message "Window %sdedicated to %s"
               (if dedicated "no longer " "")
               (buffer-name))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;; remove-dos-eol ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://stackoverflow.com/questions/730751/hiding-m-in-emacs
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))

  ;;;;;;;;;;;;;;;;;;;;;;;;; ido-bookmark-jump ;;;;;;;;;;;;;;;;;;;;;;;;;;
  (require 'bookmark)
   (defun ido-bookmark-jump (bname)
      "*Switch to bookmark interactively using `ido'."
      (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
      (bookmark-jump bname))

  ;;;;;;;;;;;;;;;;;;;;;;;;;; unfill-paragraph ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Stefan Monnier . It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))

  ;;;;;;;;;;;;;;;;;;;;;;;;; org-begin-template ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://pragmaticemacs.com/author/bjm/page/3/

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; function to wrap blocks of text in org templates                       ;;
  ;; e.g. latex or src etc                                                  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun org-begin-template ()
    "Make a template at point."
    (interactive)
    (if (org-at-table-p)
        (call-interactively 'org-table-rotate-recalc-marks)
      (let* ((choices '(("s" . "SRC")
                        ("e" . "EXAMPLE")
                        ("q" . "QUOTE")
                        ("v" . "VERSE")
                        ("c" . "CENTER")
                        ("l" . "LaTeX")
                        ("h" . "HTML")
                        ("a" . "ASCII")))
             (key
              (key-description
               (vector
                (read-key
                 (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                         (mapconcat (lambda (choice)
                                      (concat (propertize (car choice) 'face 'font-lock-type-face)
                                              ": "
                                              (cdr choice)))
                                    choices
                                    ", ")))))))
        (let ((result (assoc key choices)))
          (when result
            (let ((choice (cdr result)))
              (cond
               ((region-active-p)
                (let ((start (region-beginning))
                      (end (region-end)))
                  (goto-char end)
                  (insert "#+END_" choice "\n")
                  (goto-char start)
                  (insert "#+BEGIN_" choice "\n")))
               (t
                (insert "#+BEGIN_" choice "\n")
                (save-excursion (insert "#+END_" choice))))))))))

  ;;bind to key
  ; (define-key org-mode-map (kbd "C-<") 'org-begin-template) !!!

  ;;;;;;;;;;;;;;;;;;;;;;;; xah-new-empty-buffer ;;;;;;;;;;;;;;;;;;;;;;;;
  (defun xah-new-empty-buffer ()
    "Open a new empty buffer.
  URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
  Version 2015-06-12"
    (interactive)
    (let ((xahbuf (generate-new-buffer "untitled")))
      (switch-to-buffer xahbuf)
      (funcall (and initial-major-mode))
      (setq buffer-offer-save t)))

  (global-set-key (kbd "<f6>") 'xah-new-empty-buffer)

  ;;;;;;;;;;;;;;;;;;;;;;;;; insert-todays-date ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; from http://emacswiki.org/emacs/InsertingTodaysDate
  (defun insert-todays-date (arg)
    (interactive "P")
    (insert (if arg
                (format-time-string "%d-%m-%Y")
              (format-time-string "%Y-%m-%d %a %H:%M"))))

  (global-set-key (kbd "<f5>") 'insert-todays-date)

  ;;;;;;;;;;;;;;;;;;;;;;;; ido-bookmark-insert ;;;;;;;;;;;;;;;;;;;;;;;;;
  (require 'bookmark)
   (defun ido-bookmark-insert (bname)
      "*Insert to bookmark interactively using `ido'."
      (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
      (bookmark-insert bname))

  (global-set-key (kbd "H-i") 'ido-bookmark-insert)
#+END_SRC

[[../setup.html][back]]
